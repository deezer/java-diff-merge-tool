/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
package japa.parser;

import japa.parser.ast.*;
import japa.parser.ast.body.*;
import japa.parser.ast.expr.*;
import japa.parser.ast.stmt.*;
import japa.parser.ast.type.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

/**
 * Grammar to parse Java version 1.5
 *
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 * @author Julio Vilmar Gesser (jgesser@gmail.com) - bug fixes and added AST generation
 */
public final class JavaParser implements JavaParserConstants {

    private static JavaParser parser;
    static private int[] jj_la1_4;
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_0();
        jj_la1_1();
        jj_la1_2();
        jj_la1_3();
        jj_la1_4();
    }

    public JavaParserTokenManager token_source;
    public Token token, token_next;
    public boolean lookingAhead = false;
    JavaCharStream input_stream;
    private Token scan_position, last_position;
    private boolean rescan = false;

    private boolean jj_semLA;
    private JJCalls[] jj_2_rtns = new JJCalls[42];
    private int jj_gc = 0;
    private int mCurrentLookAhead;
    private int jj_gen;
    private int[] jj_la1 = new int[134];
    private LookAheadException jj_ls = new LookAheadException();
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    /**
     * Parses a java source code from an InputStream
     *
     * @param stream the stream to read from
     */
    public JavaParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Parses a java source code from an InputStream
     *
     * @param stream   the stream to read from
     * @param encoding the InputStream encoding
     */
    public JavaParser(java.io.InputStream stream, String encoding) {
        try {
            input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new JavaParserTokenManager(input_stream);
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Parses a java source code from an Reader
     *
     * @param reader the reader to read from
     */
    public JavaParser(java.io.Reader reader) {
        input_stream = new JavaCharStream(reader, 1, 1);
        token_source = new JavaParserTokenManager(input_stream);
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * @param tm
     */
    public JavaParser(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public static CompilationUnit parse(InputStream in, String encoding) throws ParseException {
        if (parser == null) {
            parser = new JavaParser(in, encoding);
        } else {
            parser.reset(in, encoding);
        }
        return parser.CompilationUnit();
    }

    public static CompilationUnit parse(InputStream in) throws ParseException {
        return parse(in, null);
    }

    public static CompilationUnit parse(File file, String encoding) throws ParseException {
        try {
            FileInputStream in = new FileInputStream(file);
            try {
                return parse(in, encoding);
            } finally {
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static CompilationUnit parse(File file) throws ParseException {
        return parse(file, null);
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[]{0x0, 0x48101000, 0x1, 0x0, 0x0, 0x0, 0x40001000, 0x8100000, 0x48101000, 0x100000, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a195000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x4a195000, 0x8100000, 0x2094000, 0x4a195000, 0x0, 0x0, 0x0, 0x22094000, 0x22094000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x42095000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22094000, 0x6359f000, 0x0, 0x2094000, 0x2094000, 0x0, 0x2094000, 0x10000000, 0x10000000, 0x2094000, 0x2094000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22094000, 0x0, 0x0, 0x22094000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x20000000, 0x22094000, 0x0, 0x0, 0x0, 0x2094000, 0x0, 0x0, 0x2349e000, 0x0, 0x2349e000, 0x0, 0x0, 0x0, 0x22094000, 0x820000, 0x820000, 0x4000000, 0x62095000, 0x22094000, 0x22094000, 0x62095000, 0x22094000, 0x0, 0x0, 0x0, 0x22094000, 0x40000, 0x80000000, 0x80040000, 0x0, 0x0, 0x0, 0x22094000, 0x22094000, 0x0, 0x4a195000, 0xa194000, 0x4a195000, 0x800000,};
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[]{0x20, 0x8899c500, 0x0, 0x0, 0x80000, 0x0, 0x8899c400, 0x100, 0x8899c500, 0x100, 0x0, 0x0, 0x10, 0x0, 0x0, 0x10, 0x0, 0x0, 0xc89dc781, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc89dc781, 0x100, 0x40040281, 0xc89dc781, 0x0, 0x0, 0x0, 0x51241a81, 0x51241a81, 0x0, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x889dc681, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x51241a81, 0xfbffdf8b, 0x80000, 0x40281, 0x40281, 0x0, 0x40281, 0x200000, 0x200000, 0x40281, 0x40040281, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51241a81, 0x0, 0x0, 0x51241a81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11201800, 0x0, 0x0, 0x0, 0x0, 0x1000800, 0x0, 0x10001000, 0x10000000, 0x51241a81, 0x0, 0x0, 0x0, 0x40281, 0x0, 0x0, 0x73e61a8b, 0x0, 0x73e61a8b, 0x0, 0x0, 0x0, 0x51241a81, 0x0, 0x0, 0x0, 0xd9bdde81, 0x51241a81, 0x51241a81, 0xd9bdde81, 0x51241a81, 0x0, 0x0, 0x0, 0x51241a81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51241a81, 0x51241a81, 0x0, 0x889dc781, 0x40381, 0x889dc781, 0x0,};
    }

    private static void jj_la1_2() {
        jj_la1_2 = new int[]{0x0, 0x2400000, 0x0, 0x2000000, 0x0, 0x1000000, 0x2000000, 0x2000000, 0x2400000, 0x0, 0x8000000, 0x0, 0x0, 0x800000, 0x800000, 0x0, 0x2002000, 0x800000, 0xa442000, 0x400000, 0x2000000, 0x10000, 0x40000, 0x800000, 0x0, 0x0, 0xa442000, 0x2000000, 0x8002000, 0xa402000, 0x800000, 0x4000000, 0x100000, 0x30053846, 0x30053846, 0x800000, 0x8000000, 0x100000, 0x0, 0x440000, 0x800000, 0x2002000, 0x0, 0x8000000, 0x0, 0x8000000, 0x8000000, 0x8013846, 0x2453847, 0x0, 0x0, 0x2000, 0x800000, 0x40002000, 0x0, 0x0, 0x0, 0x2000, 0x800000, 0x4000000, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30013846, 0x30000000, 0x30000000, 0x13846, 0x10000, 0x0, 0x8000000, 0x10000, 0x10000, 0x11846, 0x2000, 0x1000000, 0x8000000, 0x10000, 0x0, 0x1100000, 0x1846, 0x0, 0x30013846, 0x800000, 0x8000000, 0x110000, 0x8002000, 0x100000, 0x100000, 0x453847, 0x80000000, 0x453847, 0x800000, 0x4000000, 0x4000000, 0x13846, 0x0, 0x0, 0x0, 0x32013846, 0x30013846, 0x30013846, 0x32413846, 0x30013846, 0x800000, 0x2000, 0x2000, 0x30013846, 0x0, 0x0, 0x0, 0x2000000, 0x2000, 0x800000, 0x32053846, 0x32053846, 0x800000, 0x2402000, 0x2002000, 0x2402000, 0x0,};
    }

    private static void jj_la1_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0, 0x3c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe0000, 0x0, 0x10, 0x20, 0x2000, 0x4000, 0x1000, 0x9, 0x9, 0x0, 0x80000006, 0x80000006, 0x10000, 0x300, 0x300, 0x8c00, 0x8c00, 0x300, 0x3c0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0xffe00c0, 0xffe00c0, 0xc0, 0x0, 0x0, 0x0, 0x3c0, 0x3c0, 0x3c0, 0x3c0, 0x3c0, 0x0, 0x0, 0x0, 0x3c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0, 0x3c0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_4() {
        jj_la1_4 = new int[]{0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private void reset(InputStream in, String encoding) {
        setInputStream(in, encoding);
        token_source.clearComments();
    }

    private <T> List<T> add(List<T> list, T obj) {
        if (list == null) {
            list = new LinkedList<T>();
        }
        list.add(obj);
        return list;
    }

    private void pushJavadoc() {
        token_source.pushJavadoc();
    }

    private JavadocComment popJavadoc() {
        return token_source.popJavadoc();
    }

    List<Comment> getComments() {
        return token_source.getComments();
    }

    /**
     * **************************************
     * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
     * ***************************************
     */

    /*
     * Program structuring syntax follows.
     */
    public CompilationUnit CompilationUnit() throws ParseException {
        PackageDeclaration pakage = null;
        List<ImportDeclaration> imports = null;
        ImportDeclaration in = null;
        List<TypeDeclaration> types = null;
        TypeDeclaration tn = null;

        int line = -1;
        int column = 0;
        if (jj_2_1(2147483647)) {
            pakage = PackageDeclaration();
            line = pakage.getBeginLine();
            column = pakage.getBeginColumn();
        }
        label_1:
        while (true) {
            switch (token_next.kind) {
                case IMPORT:
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            in = ImportDeclaration();
            if (line == -1) {
                line = in.getBeginLine();
                column = in.getBeginColumn();
            }
            imports = add(imports, in);
        }
        label_2:
        while (true) {
            switch (token_next.kind) {
                case ABSTRACT:
                case CLASS:
                case ENUM:
                case FINAL:
                case INTERFACE:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case SEMICOLON:
                case AT:
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            tn = TypeDeclaration();
            if (line == -1) {
                line = tn.getBeginLine();
                column = tn.getBeginColumn();
            }
            types = add(types, tn);
        }
        switch (token_next.kind) {
            case 0:
                jj_consume_token(0);
                break;
            case 128:
                jj_consume_token(128);
                break;
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return new CompilationUnit(line == -1 ? 0 : line, column, pakage, imports, types, getComments());
    }

    public PackageDeclaration PackageDeclaration() throws ParseException {
        List<AnnotationExpr> annotations = null;
        AnnotationExpr ann;
        NameExpr name;

        label_3:
        while (true) {
            switch (token_next.kind) {
                case AT:
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_3;
            }
            ann = Annotation();
            annotations = add(annotations, ann);
        }

        jj_consume_token(PACKAGE);
        int beginLine, endLine;
        int beginColumn, endColumn;
        beginLine = token.beginLine;
        endLine = token.endLine;
        beginColumn = token.beginColumn;
        endColumn = token.endColumn;
        name = Name();
        jj_consume_token(SEMICOLON);
        return new PackageDeclaration(beginLine, beginColumn, endLine, endColumn, annotations, name);
    }

    public ImportDeclaration ImportDeclaration() throws ParseException {
        NameExpr name;
        boolean isStatic = false;
        boolean isAsterisk = false;
        int beginLine, endLine;
        int beginColumn, endColumn;
        jj_consume_token(IMPORT);
        beginLine = token.beginLine;
        endLine = token.endLine;
        beginColumn = token.beginColumn;
        endColumn = token.endColumn;
        switch (token_next.kind) {
            case STATIC:
                jj_consume_token(STATIC);
                isStatic = true;
                break;
            default:
                jj_la1[4] = jj_gen;
        }
        name = Name();
        switch (token_next.kind) {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                isAsterisk = true;
                break;
            default:
                jj_la1[5] = jj_gen;
        }
        jj_consume_token(SEMICOLON);
        return new ImportDeclaration(beginLine, beginColumn, endLine, endColumn, name, isStatic, isAsterisk);
    }

    /*
     * Modifiers. We match all modifiers in a single rule to reduce the chances of
     * syntax errors for simple modifier mistakes. It will also enable us to give
     * better error messages.
     */
    public Modifier Modifiers() throws ParseException {
        int modifiers = 0;
        List<AnnotationExpr> annotations = null;
        AnnotationExpr ann;
        while (true) {
            if (!jj_2_2(2)) {
                break;
            }
            switch (token_next.kind) {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PUBLIC, token);
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.STATIC, token);
                    break;
                case PROTECTED:
                    jj_consume_token(PROTECTED);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PROTECTED, token);
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PRIVATE, token);
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.FINAL, token);
                    break;
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.ABSTRACT, token);
                    break;
                case SYNCHRONIZED:
                    jj_consume_token(SYNCHRONIZED);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.SYNCHRONIZED, token);
                    break;
                case NATIVE:
                    jj_consume_token(NATIVE);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.NATIVE, token);
                    break;
                case TRANSIENT:
                    jj_consume_token(TRANSIENT);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.TRANSIENT, token);
                    break;
                case VOLATILE:
                    jj_consume_token(VOLATILE);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.VOLATILE, token);
                    break;
                case STRICTFP:
                    jj_consume_token(STRICTFP);
                    modifiers = ModifierSet.addModifier(modifiers, ModifierSet.STRICTFP, token);
                    break;
                case AT:
                    ann = Annotation();
                    annotations = add(annotations, ann);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return new Modifier(modifiers, annotations);
    }

    /*
     * Declaration syntax follows.
     */
    public TypeDeclaration TypeDeclaration() throws ParseException {
        Modifier modifier;
        TypeDeclaration ret;
        pushJavadoc();
        switch (token_next.kind) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                ret = new EmptyTypeDeclaration(token.beginLine, token.beginColumn, popJavadoc());
                break;
            case ABSTRACT:
            case CLASS:
            case ENUM:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case AT:
                modifier = Modifiers();
                switch (token_next.kind) {
                    case CLASS:
                    case INTERFACE:
                        ret = ClassOrInterfaceDeclaration(modifier);
                        break;
                    case ENUM:
                        ret = EnumDeclaration(modifier);
                        break;
                    case AT:
                        ret = AnnotationTypeDeclaration(modifier);
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(Modifier modifier) throws ParseException {
        boolean isInterface = false;
        String name;
        List<TypeParameter> typePar = null;
        List<ClassOrInterfaceType> extList = null;
        List<ClassOrInterfaceType> impList = null;
        List<BodyDeclaration> members;
        int line;
        int column;
        switch (token_next.kind) {
            case CLASS:
                jj_consume_token(CLASS);
                break;
            case INTERFACE:
                jj_consume_token(INTERFACE);
                isInterface = true;
                break;
            default:
                jj_la1[9] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        switch (token_next.kind) {
            case LT:
                typePar = TypeParameters();
                break;
            default:
                jj_la1[10] = jj_gen;
        }
        switch (token_next.kind) {
            case EXTENDS:
                extList = ExtendsList(isInterface);
                break;
            default:
                jj_la1[11] = jj_gen;
        }
        switch (token_next.kind) {
            case IMPLEMENTS:
                impList = ImplementsList(isInterface);
                break;
            default:
                jj_la1[12] = jj_gen;
        }
        members = ClassOrInterfaceBody(isInterface);

        return new ClassOrInterfaceDeclaration(line, column, popJavadoc(), modifier.modifiers, modifier.annotations, isInterface, name, typePar, extList, impList, members);
    }

    public List<ClassOrInterfaceType> ExtendsList(boolean isInterface) throws ParseException {
        boolean extendsMoreThanOne = false;
        List<ClassOrInterfaceType> ret = new LinkedList<ClassOrInterfaceType>();
        ClassOrInterfaceType cit;
        jj_consume_token(EXTENDS);
        cit = ClassOrInterfaceType();
        ret.add(cit);
        label_5:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    break label_5;
            }
            jj_consume_token(COMMA);
            cit = ClassOrInterfaceType();
            ret.add(cit);
            extendsMoreThanOne = true;
        }
        if (extendsMoreThanOne && !isInterface) {
            throw new ParseException(token, "A class cannot extend more than one other class");
        }
        return ret;
    }

    public List<ClassOrInterfaceType> ImplementsList(boolean isInterface) throws ParseException {
        List<ClassOrInterfaceType> ret = new LinkedList<ClassOrInterfaceType>();
        ClassOrInterfaceType cit;
        jj_consume_token(IMPLEMENTS);
        cit = ClassOrInterfaceType();
        ret.add(cit);
        label_6:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    break label_6;
            }
            jj_consume_token(COMMA);
            cit = ClassOrInterfaceType();
            ret.add(cit);
        }
        if (isInterface) {
            throw new ParseException(token, "An interface cannot implement other interfaces");
        }
        return ret;
    }

    public EnumDeclaration EnumDeclaration(Modifier modifier) throws ParseException {
        String name;
        List<ClassOrInterfaceType> impList = null;
        EnumConstantDeclaration entry;
        List<EnumConstantDeclaration> entries = null;
        BodyDeclaration member;
        List<BodyDeclaration> members = null;
        int line;
        int column;
        jj_consume_token(ENUM);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        switch (token_next.kind) {
            case IMPLEMENTS:
                impList = ImplementsList(false);
                break;
            default:
                jj_la1[15] = jj_gen;
        }
        jj_consume_token(LBRACE);
        switch (token_next.kind) {
            case IDENTIFIER:
            case AT:
                entries = new LinkedList<EnumConstantDeclaration>();
                entry = EnumConstantDeclaration();
                entries.add(entry);
                while (true) {
                    if (!jj_2_3(2)) {
                        break;
                    }
                    jj_consume_token(COMMA);
                    entry = EnumConstantDeclaration();
                    entries.add(entry);
                }
                break;
            default:
                jj_la1[16] = jj_gen;
        }
        switch (token_next.kind) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[17] = jj_gen;
        }
        switch (token_next.kind) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                label_8:
                while (true) {
                    switch (token_next.kind) {
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CLASS:
                        case DOUBLE:
                        case ENUM:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case INTERFACE:
                        case LONG:
                        case NATIVE:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case STRICTFP:
                        case SYNCHRONIZED:
                        case TRANSIENT:
                        case VOID:
                        case VOLATILE:
                        case IDENTIFIER:
                        case LBRACE:
                        case SEMICOLON:
                        case AT:
                        case LT:
                            break;
                        default:
                            jj_la1[18] = jj_gen;
                            break label_8;
                    }
                    member = ClassOrInterfaceBodyDeclaration(false);
                    members = add(members, member);
                }
                break;
            default:
                jj_la1[19] = jj_gen;
        }
        jj_consume_token(RBRACE);

        return new EnumDeclaration(line, column, popJavadoc(), modifier.modifiers, modifier.annotations, name, impList, entries, members);
    }

    public EnumConstantDeclaration EnumConstantDeclaration() throws ParseException {
        List<AnnotationExpr> annotations = null;
        AnnotationExpr ann;
        String name;
        List<Expression> args = null;
        List<BodyDeclaration> classBody = null;
        int line;
        int column;
        pushJavadoc();
        label_9:
        while (true) {
            switch (token_next.kind) {
                case AT:
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_9;
            }
            ann = Annotation();
            annotations = add(annotations, ann);
        }
        jj_consume_token(IDENTIFIER);
        name = token.image;
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case LPAREN:
                args = Arguments();
                break;
            default:
                jj_la1[21] = jj_gen;
        }
        switch (token_next.kind) {
            case LBRACE:
                classBody = ClassOrInterfaceBody(false);
                break;
            default:
                jj_la1[22] = jj_gen;
        }

        return new EnumConstantDeclaration(line, column, popJavadoc(), annotations, name, args, classBody);
    }

    public List<TypeParameter> TypeParameters() throws ParseException {
        List<TypeParameter> ret = new LinkedList<TypeParameter>();
        TypeParameter tp;
        jj_consume_token(LT);
        tp = TypeParameter();
        ret.add(tp);
        label_10:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_10;
            }
            jj_consume_token(COMMA);
            tp = TypeParameter();
            ret.add(tp);
        }
        jj_consume_token(GT);
        return ret;
    }

    public TypeParameter TypeParameter() throws ParseException {
        String name;
        List<ClassOrInterfaceType> typeBound = null;
        int line;
        int column;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case EXTENDS:
                typeBound = TypeBound();
                break;
            default:
                jj_la1[24] = jj_gen;
        }
        return new TypeParameter(line, column, name, typeBound);
    }

    public List<ClassOrInterfaceType> TypeBound() throws ParseException {
        List<ClassOrInterfaceType> ret = new LinkedList<ClassOrInterfaceType>();
        ClassOrInterfaceType cit;
        jj_consume_token(EXTENDS);
        cit = ClassOrInterfaceType();
        ret.add(cit);
        label_11:
        while (true) {
            switch (token_next.kind) {
                case BIT_AND:
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    break label_11;
            }
            jj_consume_token(BIT_AND);
            cit = ClassOrInterfaceType();
            ret.add(cit);
        }
        return ret;
    }

    public List<BodyDeclaration> ClassOrInterfaceBody(boolean isInterface) throws ParseException {
        List<BodyDeclaration> ret = new LinkedList<BodyDeclaration>();
        BodyDeclaration member;
        jj_consume_token(LBRACE);
        label_12:
        while (true) {
            switch (token_next.kind) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
                case LBRACE:
                case SEMICOLON:
                case AT:
                case LT:
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_12;
            }
            member = ClassOrInterfaceBodyDeclaration(isInterface);
            ret.add(member);
        }
        jj_consume_token(RBRACE);
        return ret;
    }

    public BodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
        Modifier modifier;
        BodyDeclaration ret;
        pushJavadoc();
        if (jj_2_6(2)) {
            ret = InitializerDeclaration();
            if (isInterface) {
                throw new ParseException(token, "An interface cannot have initializers");
            }
        } else {
            switch (token_next.kind) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
                case AT:
                case LT:
                    modifier = Modifiers();
                    switch (token_next.kind) {
                        case CLASS:
                        case INTERFACE:
                            ret = ClassOrInterfaceDeclaration(modifier);
                            break;
                        case ENUM:
                            ret = EnumDeclaration(modifier);
                            break;
                        case AT:
                            ret = AnnotationTypeDeclaration(modifier);
                            break;
                        default:
                            jj_la1[27] = jj_gen;
                            if (jj_2_4(2147483647)) {
                                ret = ConstructorDeclaration(modifier);
                            } else if (jj_2_5(2147483647)) {
                                ret = FieldDeclaration(modifier);
                            } else {
                                switch (token_next.kind) {
                                    case BOOLEAN:
                                    case BYTE:
                                    case CHAR:
                                    case DOUBLE:
                                    case FLOAT:
                                    case INT:
                                    case LONG:
                                    case SHORT:
                                    case VOID:
                                    case IDENTIFIER:
                                    case LT:
                                        ret = MethodDeclaration(modifier);
                                        break;
                                    default:
                                        jj_la1[28] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                    }
                    break;
                case SEMICOLON:
                    jj_consume_token(SEMICOLON);
                    ret = new EmptyMemberDeclaration(token.beginLine, token.beginColumn, popJavadoc());
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public FieldDeclaration FieldDeclaration(Modifier modifier) throws ParseException {
        Type type;
        List<VariableDeclarator> variables = new LinkedList<VariableDeclarator>();
        VariableDeclarator val;
        // Modifiers are already matched in the caller
        type = Type();
        val = VariableDeclarator();
        variables.add(val);
        label_13:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_13;
            }
            jj_consume_token(COMMA);
            val = VariableDeclarator();
            variables.add(val);
        }
        jj_consume_token(SEMICOLON);

        return new FieldDeclaration(type.getBeginLine(), type.getBeginColumn(), popJavadoc(), modifier.modifiers, modifier.annotations, type, variables);
    }

    public VariableDeclarator VariableDeclarator() throws ParseException {
        VariableDeclaratorId id;
        Expression init = null;
        id = VariableDeclaratorId();
        switch (token_next.kind) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                init = VariableInitializer();
                break;
            default:
                jj_la1[31] = jj_gen;
        }
        return new VariableDeclarator(id.getBeginLine(), id.getBeginColumn(), id, init);
    }

    public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
        String name;
        int arrayCount = 0;
        int line;
        int column;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        line = token.beginLine;
        column = token.beginColumn;
        label_14:
        while (true) {
            switch (token_next.kind) {
                case LBRACKET:
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    break label_14;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            arrayCount++;
        }
        return new VariableDeclaratorId(line, column, name, arrayCount);
    }

    public Expression VariableInitializer() throws ParseException {
        Expression ret;
        switch (token_next.kind) {
            case LBRACE:
                ret = ArrayInitializer();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                ret = Expression();
                break;
            default:
                jj_la1[33] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public ArrayInitializerExpr ArrayInitializer() throws ParseException {
        List<Expression> values = null;
        Expression val;
        int line;
        int column;
        jj_consume_token(LBRACE);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                val = VariableInitializer();
                values = add(null, val);
                while (true) {
                    if (!jj_2_7(2)) {
                        break;
                    }
                    jj_consume_token(COMMA);
                    val = VariableInitializer();
                    values = add(values, val);
                }
                break;
            default:
                jj_la1[34] = jj_gen;
        }
        switch (token_next.kind) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[35] = jj_gen;
        }
        jj_consume_token(RBRACE);
        return new ArrayInitializerExpr(line, column, values);
    }

    public MethodDeclaration MethodDeclaration(Modifier modifier) throws ParseException {
        List<TypeParameter> typeParameters = null;
        Type type;
        String name;
        List<Parameter> parameters;
        int arrayCount = 0;
        List<NameExpr> throws_ = null;
        BlockStmt block = null;
        int line = -1;
        int column = 0;
        switch (token_next.kind) {
            case LT:
                typeParameters = TypeParameters();
                line = typeParameters.get(0).getBeginLine();
                column = typeParameters.get(0).getBeginColumn();
                break;
            default:
                jj_la1[36] = jj_gen;
        }
        type = ResultType();
        if (line == -1) {
            line = type.getBeginLine();
            column = type.getBeginColumn();
        }
        jj_consume_token(IDENTIFIER);
        name = token.image;
        parameters = FormalParameters();
        label_16:
        while (true) {
            switch (token_next.kind) {
                case LBRACKET:
                    break;
                default:
                    jj_la1[37] = jj_gen;
                    break label_16;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            arrayCount++;
        }
        switch (token_next.kind) {
            case THROWS:
                jj_consume_token(THROWS);
                throws_ = NameList();
                break;
            default:
                jj_la1[38] = jj_gen;
        }
        switch (token_next.kind) {
            case LBRACE:
                block = Block();
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }

        return new MethodDeclaration(line, column, popJavadoc(), modifier.modifiers, modifier.annotations, typeParameters, type, name, parameters, arrayCount, throws_, block);
    }

    public List<Parameter> FormalParameters() throws ParseException {
        List<Parameter> ret = null;
        Parameter par;
        jj_consume_token(LPAREN);
        switch (token_next.kind) {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
            case AT:
                par = FormalParameter();
                ret = add(null, par);
                label_17:
                while (true) {
                    switch (token_next.kind) {
                        case COMMA:
                            break;
                        default:
                            jj_la1[40] = jj_gen;
                            break label_17;
                    }
                    jj_consume_token(COMMA);
                    par = FormalParameter();
                    ret = add(ret, par);
                }
                break;
            default:
                jj_la1[41] = jj_gen;
        }
        jj_consume_token(RPAREN);
        return ret;
    }

    public Parameter FormalParameter() throws ParseException {
        Modifier modifier;
        Type type;
        boolean isVarArg = false;
        VariableDeclaratorId id;
        modifier = Modifiers();
        type = Type();
        switch (token_next.kind) {
            case ELLIPSIS:
                jj_consume_token(ELLIPSIS);
                isVarArg = true;
                break;
            default:
                jj_la1[42] = jj_gen;
        }
        id = VariableDeclaratorId();

        return new Parameter(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, isVarArg, id);
    }

    public ConstructorDeclaration ConstructorDeclaration(Modifier modifier) throws ParseException {
        List<TypeParameter> typeParameters = null;
        String name;
        List<Parameter> parameters;
        List<NameExpr> throws_ = null;
        ExplicitConstructorInvocationStmt exConsInv = null;
        List<Statement> stmts;
        int line = -1;
        int column = 0;
        int bbLine = 0;
        int bbColumn = 0;
        int beLine = 0;
        int beColumn = 0;
        switch (token_next.kind) {
            case LT:
                typeParameters = TypeParameters();
                line = typeParameters.get(0).getBeginLine();
                column = typeParameters.get(0).getBeginColumn();
                break;
            default:
                jj_la1[43] = jj_gen;
        }
        jj_consume_token(IDENTIFIER);
        name = token.image;
        if (line == -1) {
            line = token.beginLine;
            column = token.beginColumn;
        }
        parameters = FormalParameters();
        switch (token_next.kind) {
            case THROWS:
                jj_consume_token(THROWS);
                throws_ = NameList();
                break;
            default:
                jj_la1[44] = jj_gen;
        }
        jj_consume_token(LBRACE);
        bbLine = token.beginLine;
        bbColumn = token.beginColumn;
        if (jj_2_8(2147483647)) {
            exConsInv = ExplicitConstructorInvocation();
        }
        stmts = Statements();
        jj_consume_token(RBRACE);
        beLine = token.beginLine;
        beColumn = token.beginColumn;
        if (exConsInv != null) {
            if (stmts == null) {
                stmts = new LinkedList<Statement>();
            }
            stmts.add(0, exConsInv);
        }

        return new ConstructorDeclaration(line, column, popJavadoc(), modifier.modifiers, modifier.annotations, typeParameters, name, parameters, throws_, new BlockStmt(bbLine, bbColumn, beLine, beColumn, stmts));
    }

    public ExplicitConstructorInvocationStmt ExplicitConstructorInvocation() throws ParseException {
        boolean isThis = false;
        List<Expression> args;
        Expression expr = null;
        List<Type> typeArgs = null;
        int line = -1;
        int column = 0;
        if (jj_2_10(2147483647)) {
            switch (token_next.kind) {
                case LT:
                    typeArgs = TypeArguments();
                    line = typeArgs.get(0).getBeginLine();
                    column = typeArgs.get(0).getBeginColumn();
                    break;
                default:
                    jj_la1[45] = jj_gen;
            }
            jj_consume_token(THIS);
            if (line == -1) {
                line = token.beginLine;
                column = token.beginColumn;
            }
            isThis = true;
            args = Arguments();
            jj_consume_token(SEMICOLON);
        } else {
            switch (token_next.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LT:
                    if (jj_2_9(2147483647)) {
                        expr = PrimaryExpressionWithoutSuperSuffix();
                        jj_consume_token(DOT);
                        line = expr.getBeginLine();
                        column = expr.getBeginColumn();
                    }
                    switch (token_next.kind) {
                        case LT:
                            typeArgs = TypeArguments();
                            if (line == -1) {
                                line = typeArgs.get(0).getBeginLine();
                                column = typeArgs.get(0).getBeginColumn();
                            }
                            break;
                        default:
                            jj_la1[46] = jj_gen;
                    }
                    jj_consume_token(SUPER);
                    if (line == -1) {
                        line = token.beginLine;
                        column = token.beginColumn;
                    }
                    args = Arguments();
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return new ExplicitConstructorInvocationStmt(line, column, typeArgs, isThis, expr, args);
    }

    public List<Statement> Statements() throws ParseException {
        List<Statement> ret = null;
        Statement stmt;
        label_18:
        while (true) {
            switch (token_next.kind) {
                case ABSTRACT:
                case ASSERT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRANSIENT:
                case TRUE:
                case TRY:
                case VOID:
                case VOLATILE:
                case WHILE:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case AT:
                case INCR:
                case DECR:
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    break label_18;
            }
            stmt = BlockStatement();
            ret = add(ret, stmt);
        }
        return ret;
    }

    public InitializerDeclaration InitializerDeclaration() throws ParseException {
        BlockStmt block;
        int line = -1;
        int column = 0;
        boolean isStatic = false;
        switch (token_next.kind) {
            case STATIC:
                jj_consume_token(STATIC);
                isStatic = true;
                line = token.beginLine;
                column = token.beginColumn;
                break;
            default:
                jj_la1[49] = jj_gen;
        }
        block = Block();
        if (line == -1) {
            line = block.getBeginLine();
            column = block.getBeginColumn();
        }
        return new InitializerDeclaration(line, column, popJavadoc(), isStatic, block);
    }

    /*
 * Type, name and expression syntax follows.
 */
    public Type Type() throws ParseException {
        Type ret;
        if (jj_2_11(2)) {
            ret = ReferenceType();
        } else {
            switch (token_next.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    ret = PrimitiveType();
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public ReferenceType ReferenceType() throws ParseException {
        Type type;
        int arrayCount = 0;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                type = PrimitiveType();
                while (true) {
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    arrayCount++;
                    if (!jj_2_12(2)) {
                        break;
                    }
                }
                break;
            case IDENTIFIER:
                type = ClassOrInterfaceType();
                while (true) {
                    if (!jj_2_13(2)) {
                        break;
                    }
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    arrayCount++;
                }
                break;
            default:
                jj_la1[51] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return new ReferenceType(type.getBeginLine(), type.getBeginColumn(), type, arrayCount);
    }

    public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {
        ClassOrInterfaceType ret;
        String name;
        List<Type> typeArgs = null;
        int line;
        int column;
        jj_consume_token(IDENTIFIER);
        line = token.beginLine;
        column = token.beginColumn;
        name = token.image;
        if (jj_2_14(2)) {
            typeArgs = TypeArguments();
        }
        ret = new ClassOrInterfaceType(line, column, null, name, typeArgs);
        while (true) {
            if (!jj_2_15(2)) {
                break;
            }
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            name = token.image;
            if (jj_2_16(2)) {
                typeArgs = TypeArguments();
            }
            ret = new ClassOrInterfaceType(line, column, ret, name, typeArgs);
        }
        return ret;
    }

    public List<Type> TypeArguments() throws ParseException {
        List<Type> ret = new LinkedList<Type>();
        Type type;
        jj_consume_token(LT);
        type = TypeArgument();
        ret.add(type);
        label_22:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    break label_22;
            }
            jj_consume_token(COMMA);
            type = TypeArgument();
            ret.add(type);
        }
        jj_consume_token(GT);
        return ret;
    }

    public Type TypeArgument() throws ParseException {
        Type ret;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                ret = ReferenceType();
                break;
            case HOOK:
                ret = Wildcard();
                break;
            default:
                jj_la1[53] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public WildcardType Wildcard() throws ParseException {
        ReferenceType ext = null;
        ReferenceType sup = null;
        int line;
        int column;
        jj_consume_token(HOOK);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case EXTENDS:
            case SUPER:
                switch (token_next.kind) {
                    case EXTENDS:
                        jj_consume_token(EXTENDS);
                        ext = ReferenceType();
                        break;
                    case SUPER:
                        jj_consume_token(SUPER);
                        sup = ReferenceType();
                        break;
                    default:
                        jj_la1[54] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[55] = jj_gen;
        }
        return new WildcardType(line, column, ext, sup);
    }

    public PrimitiveType PrimitiveType() throws ParseException {
        PrimitiveType ret;
        switch (token_next.kind) {
            case BOOLEAN:
                jj_consume_token(BOOLEAN);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Boolean);
                break;
            case CHAR:
                jj_consume_token(CHAR);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Char);
                break;
            case BYTE:
                jj_consume_token(BYTE);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Byte);
                break;
            case SHORT:
                jj_consume_token(SHORT);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Short);
                break;
            case INT:
                jj_consume_token(INT);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Int);
                break;
            case LONG:
                jj_consume_token(LONG);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Long);
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Float);
                break;
            case DOUBLE:
                jj_consume_token(DOUBLE);
                ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Double);
                break;
            default:
                jj_la1[56] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Type ResultType() throws ParseException {
        Type ret;
        switch (token_next.kind) {
            case VOID:
                jj_consume_token(VOID);
                ret = new VoidType(token.beginLine, token.beginColumn);
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                ret = Type();
                break;
            default:
                jj_la1[57] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public NameExpr Name() throws ParseException {
        NameExpr ret;
        jj_consume_token(IDENTIFIER);
        ret = new NameExpr(token.beginLine, token.beginColumn, token.image);
        while (true) {
            if (!scan_identifier_continues(2)) {
                break;
            }
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            ret = new QualifiedNameExpr(token.beginLine, token.beginColumn, ret, token.image);
        }
        return ret;
    }

    public List<NameExpr> NameList() throws ParseException {
        List<NameExpr> ret = new LinkedList<NameExpr>();
        NameExpr name;
        name = Name();
        ret.add(name);
        label_24:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    break label_24;
            }
            jj_consume_token(COMMA);
            name = Name();
            ret.add(name);
        }
        return ret;
    }

    /*
     * Expression syntax follows.
     */
    public Expression Expression() throws ParseException {
        Expression ret;
        AssignExpr.Operator op;
        Expression value;
        ret = ConditionalExpression();
        if (jj_2_18(2)) {
            op = AssignmentOperator();
            value = Expression();
            ret = new AssignExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, value, op);
        }
        return ret;
    }

    public AssignExpr.Operator AssignmentOperator() throws ParseException {
        AssignExpr.Operator ret;
        switch (token_next.kind) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                ret = AssignExpr.Operator.assign;
                break;
            case STARASSIGN:
                jj_consume_token(STARASSIGN);
                ret = AssignExpr.Operator.star;
                break;
            case SLASHASSIGN:
                jj_consume_token(SLASHASSIGN);
                ret = AssignExpr.Operator.slash;
                break;
            case REMASSIGN:
                jj_consume_token(REMASSIGN);
                ret = AssignExpr.Operator.rem;
                break;
            case PLUSASSIGN:
                jj_consume_token(PLUSASSIGN);
                ret = AssignExpr.Operator.plus;
                break;
            case MINUSASSIGN:
                jj_consume_token(MINUSASSIGN);
                ret = AssignExpr.Operator.minus;
                break;
            case LSHIFTASSIGN:
                jj_consume_token(LSHIFTASSIGN);
                ret = AssignExpr.Operator.lShift;
                break;
            case RSIGNEDSHIFTASSIGN:
                jj_consume_token(RSIGNEDSHIFTASSIGN);
                ret = AssignExpr.Operator.rSignedShift;
                break;
            case RUNSIGNEDSHIFTASSIGN:
                jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                ret = AssignExpr.Operator.rUnsignedShift;
                break;
            case ANDASSIGN:
                jj_consume_token(ANDASSIGN);
                ret = AssignExpr.Operator.and;
                break;
            case XORASSIGN:
                jj_consume_token(XORASSIGN);
                ret = AssignExpr.Operator.xor;
                break;
            case ORASSIGN:
                jj_consume_token(ORASSIGN);
                ret = AssignExpr.Operator.or;
                break;
            default:
                jj_la1[59] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression ConditionalExpression() throws ParseException {
        Expression ret;
        Expression left;
        Expression right;
        ret = ConditionalOrExpression();
        switch (token_next.kind) {
            case HOOK:
                jj_consume_token(HOOK);
                left = Expression();
                jj_consume_token(COLON);
                right = ConditionalExpression();
                ret = new ConditionalExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, left, right);
                break;
            default:
                jj_la1[60] = jj_gen;
        }
        return ret;
    }

    public Expression ConditionalOrExpression() throws ParseException {
        Expression ret;
        Expression right;
        ret = ConditionalAndExpression();
        label_25:
        while (true) {
            switch (token_next.kind) {
                case SC_OR:
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    break label_25;
            }
            jj_consume_token(SC_OR);
            right = ConditionalAndExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.or);
        }
        return ret;
    }

    public Expression ConditionalAndExpression() throws ParseException {
        Expression ret;
        Expression right;
        ret = InclusiveOrExpression();
        label_26:
        while (true) {
            switch (token_next.kind) {
                case SC_AND:
                    break;
                default:
                    jj_la1[62] = jj_gen;
                    break label_26;
            }
            jj_consume_token(SC_AND);
            right = InclusiveOrExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.and);
        }
        return ret;
    }

    public Expression InclusiveOrExpression() throws ParseException {
        Expression ret;
        Expression right;
        ret = ExclusiveOrExpression();
        label_27:
        while (true) {
            switch (token_next.kind) {
                case BIT_OR:
                    break;
                default:
                    jj_la1[63] = jj_gen;
                    break label_27;
            }
            jj_consume_token(BIT_OR);
            right = ExclusiveOrExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binOr);
        }
        return ret;
    }

    public Expression ExclusiveOrExpression() throws ParseException {
        Expression ret;
        Expression right;
        ret = AndExpression();
        label_28:
        while (true) {
            switch (token_next.kind) {
                case XOR:
                    break;
                default:
                    jj_la1[64] = jj_gen;
                    break label_28;
            }
            jj_consume_token(XOR);
            right = AndExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.xor);
        }
        return ret;
    }

    public Expression AndExpression() throws ParseException {
        Expression ret;
        Expression right;
        ret = EqualityExpression();
        label_29:
        while (true) {
            switch (token_next.kind) {
                case BIT_AND:
                    break;
                default:
                    jj_la1[65] = jj_gen;
                    break label_29;
            }
            jj_consume_token(BIT_AND);
            right = EqualityExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binAnd);
        }
        return ret;
    }

    public Expression EqualityExpression() throws ParseException {
        Expression ret;
        Expression right;
        BinaryExpr.Operator op;
        ret = InstanceOfExpression();
        label_30:
        while (true) {
            switch (token_next.kind) {
                case EQ:
                case NE:
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    break label_30;
            }
            switch (token_next.kind) {
                case EQ:
                    jj_consume_token(EQ);
                    op = BinaryExpr.Operator.equals;
                    break;
                case NE:
                    jj_consume_token(NE);
                    op = BinaryExpr.Operator.notEquals;
                    break;
                default:
                    jj_la1[67] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = InstanceOfExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
        }
        return ret;
    }

    public Expression InstanceOfExpression() throws ParseException {
        Expression ret;
        Type type;
        ret = RelationalExpression();
        switch (token_next.kind) {
            case INSTANCEOF:
                jj_consume_token(INSTANCEOF);
                type = Type();
                ret = new InstanceOfExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, type);
                break;
            default:
                jj_la1[68] = jj_gen;
        }
        return ret;
    }

    public Expression RelationalExpression() throws ParseException {
        Expression ret;
        Expression right;
        BinaryExpr.Operator op;
        ret = ShiftExpression();
        label_31:
        while (true) {
            switch (token_next.kind) {
                case LT:
                case LE:
                case GE:
                case GT:
                    break;
                default:
                    jj_la1[69] = jj_gen;
                    break label_31;
            }
            switch (token_next.kind) {
                case LT:
                    jj_consume_token(LT);
                    op = BinaryExpr.Operator.less;
                    break;
                case GT:
                    jj_consume_token(GT);
                    op = BinaryExpr.Operator.greater;
                    break;
                case LE:
                    jj_consume_token(LE);
                    op = BinaryExpr.Operator.lessEquals;
                    break;
                case GE:
                    jj_consume_token(GE);
                    op = BinaryExpr.Operator.greaterEquals;
                    break;
                default:
                    jj_la1[70] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = ShiftExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
        }
        return ret;
    }

    public Expression ShiftExpression() throws ParseException {
        Expression ret;
        Expression right;
        BinaryExpr.Operator op;
        ret = AdditiveExpression();
        while (true) {
            if (!jj_2_19(1)) {
                break;
            }
            switch (token_next.kind) {
                case LSHIFT:
                    jj_consume_token(LSHIFT);
                    op = BinaryExpr.Operator.lShift;
                    break;
                default:
                    jj_la1[71] = jj_gen;
                    if (jj_2_20(1)) {
                        RSIGNEDSHIFT();
                        op = BinaryExpr.Operator.rSignedShift;
                    } else if (jj_2_21(1)) {
                        RUNSIGNEDSHIFT();
                        op = BinaryExpr.Operator.rUnsignedShift;
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
            right = AdditiveExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
        }
        return ret;
    }

    public Expression AdditiveExpression() throws ParseException {
        Expression ret;
        Expression right;
        BinaryExpr.Operator op;
        ret = MultiplicativeExpression();
        label_33:
        while (true) {
            switch (token_next.kind) {
                case PLUS:
                case MINUS:
                    break;
                default:
                    jj_la1[72] = jj_gen;
                    break label_33;
            }
            switch (token_next.kind) {
                case PLUS:
                    jj_consume_token(PLUS);
                    op = BinaryExpr.Operator.plus;
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    op = BinaryExpr.Operator.minus;
                    break;
                default:
                    jj_la1[73] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = MultiplicativeExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
        }
        return ret;
    }

    public Expression MultiplicativeExpression() throws ParseException {
        Expression ret;
        Expression right;
        BinaryExpr.Operator op;
        ret = UnaryExpression();
        label_34:
        while (true) {
            switch (token_next.kind) {
                case STAR:
                case SLASH:
                case REM:
                    break;
                default:
                    jj_la1[74] = jj_gen;
                    break label_34;
            }
            switch (token_next.kind) {
                case STAR:
                    jj_consume_token(STAR);
                    op = BinaryExpr.Operator.times;
                    break;
                case SLASH:
                    jj_consume_token(SLASH);
                    op = BinaryExpr.Operator.divide;
                    break;
                case REM:
                    jj_consume_token(REM);
                    op = BinaryExpr.Operator.remainder;
                    break;
                default:
                    jj_la1[75] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = UnaryExpression();
            ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
        }
        return ret;
    }

    public Expression UnaryExpression() throws ParseException {
        Expression ret;
        UnaryExpr.Operator op;
        int line;
        int column;
        switch (token_next.kind) {
            case PLUS:
            case MINUS:
                switch (token_next.kind) {
                    case PLUS:
                        jj_consume_token(PLUS);
                        op = UnaryExpr.Operator.positive;
                        line = token.beginLine;
                        column = token.beginColumn;
                        break;
                    case MINUS:
                        jj_consume_token(MINUS);
                        op = UnaryExpr.Operator.negative;
                        line = token.beginLine;
                        column = token.beginColumn;
                        break;
                    default:
                        jj_la1[76] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                ret = UnaryExpression();
                if (op == UnaryExpr.Operator.negative) {
                    if (ret instanceof IntegerLiteralExpr && ((IntegerLiteralExpr) ret).isMinValue()) {
                        ret = new IntegerLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
                    } else if (ret instanceof LongLiteralExpr && ((LongLiteralExpr) ret).isMinValue()) {
                        ret = new LongLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
                    } else {
                        ret = new UnaryExpr(line, column, ret, op);
                    }
                } else {
                    ret = new UnaryExpr(line, column, ret, op);
                }
                break;
            case INCR:
                ret = PreIncrementExpression();
                break;
            case DECR:
                ret = PreDecrementExpression();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
                ret = UnaryExpressionNotPlusMinus();
                break;
            default:
                jj_la1[77] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression PreIncrementExpression() throws ParseException {
        Expression ret;
        int line;
        int column;
        jj_consume_token(INCR);
        line = token.beginLine;
        column = token.beginColumn;
        ret = PrimaryExpression();
        ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preIncrement);
        return ret;
    }

    public Expression PreDecrementExpression() throws ParseException {
        Expression ret;
        int line;
        int column;
        jj_consume_token(DECR);
        line = token.beginLine;
        column = token.beginColumn;
        ret = PrimaryExpression();
        ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preDecrement);
        return ret;
    }

    public Expression UnaryExpressionNotPlusMinus() throws ParseException {
        Expression ret;
        UnaryExpr.Operator op;
        int line;
        int column;
        switch (token_next.kind) {
            case BANG:
            case TILDE:
                switch (token_next.kind) {
                    case TILDE:
                        jj_consume_token(TILDE);
                        op = UnaryExpr.Operator.inverse;
                        line = token.beginLine;
                        column = token.beginColumn;
                        break;
                    case BANG:
                        jj_consume_token(BANG);
                        op = UnaryExpr.Operator.not;
                        line = token.beginLine;
                        column = token.beginColumn;
                        break;
                    default:
                        jj_la1[78] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                ret = UnaryExpression();
                ret = new UnaryExpr(line, column, ret, op);
                break;
            default:
                jj_la1[79] = jj_gen;
                if (jj_2_22(2147483647)) {
                    ret = CastExpression();
                } else {
                    switch (token_next.kind) {
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case LONG_LITERAL:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            ret = PostfixExpression();
                            break;
                        default:
                            jj_la1[80] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        return ret;
    }

    // This production is to determine lookahead only.  The LOOKAHEAD specifications
    // below are not used, but they are there just to indicate that we know about
    // this.
    public void CastLookahead() throws ParseException {
        if (jj_2_23(2147483647)) {
            jj_consume_token(LPAREN);
            Type();
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } else {
            switch (token_next.kind) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    Type();
                    jj_consume_token(RPAREN);
                    UnaryExpression();
                    break;
                default:
                    jj_la1[81] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public Expression PostfixExpression() throws ParseException {
        Expression ret;
        UnaryExpr.Operator op;
        int line;
        int column;
        ret = PrimaryExpression();
        if (jj_2_24(2)) {
            switch (token_next.kind) {
                case INCR:
                    jj_consume_token(INCR);
                    op = UnaryExpr.Operator.posIncrement;
                    line = token.beginLine;
                    column = token.beginColumn;
                    break;
                case DECR:
                    jj_consume_token(DECR);
                    op = UnaryExpr.Operator.posDecrement;
                    line = token.beginLine;
                    column = token.beginColumn;
                    break;
                default:
                    jj_la1[82] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            ret = new UnaryExpr(line, column, ret, op);
        }
        return ret;
    }

    public Expression CastExpression() throws ParseException {
        Expression ret;
        Type type;
        int line;
        int column;
        jj_consume_token(LPAREN);
        line = token.beginLine;
        column = token.beginColumn;
        type = Type();
        jj_consume_token(RPAREN);
        ret = UnaryExpression();
        ret = new CastExpr(line, column, type, ret);
        return ret;
    }

    public Expression PrimaryExpression() throws ParseException {
        Expression ret;
        ret = PrimaryPrefix();
        while (true) {
            if (!jj_2_25(2)) {
                break;
            }
            ret = PrimarySuffix(ret);
        }
        return ret;
    }

    public Expression PrimaryExpressionWithoutSuperSuffix() throws ParseException {
        Expression ret;
        ret = PrimaryPrefix();
        while (true) {
            if (!jj_2_26(2147483647)) {
                break;
            }
            ret = PrimarySuffixWithoutSuper(ret);
        }
        return ret;
    }

    public Expression PrimaryPrefix() throws ParseException {
        Expression ret;
        String name;
        List<Type> typeArgs = null;
        List<Expression> args = null;
        boolean hasArgs = false;
        Type type;
        int line = -1;
        int column = 0;
        switch (token_next.kind) {
            case FALSE:
            case NULL:
            case TRUE:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                ret = Literal();
                break;
            case THIS:
                jj_consume_token(THIS);
                ret = new ThisExpr(token.beginLine, token.beginColumn, null);
                break;
            case SUPER:
                jj_consume_token(SUPER);
                ret = new SuperExpr(token.beginLine, token.beginColumn, null);
                jj_consume_token(DOT);
                switch (token_next.kind) {
                    case LT:
                        typeArgs = TypeArguments();
                        line = typeArgs.get(0).getBeginLine();
                        column = typeArgs.get(0).getBeginColumn();
                        break;
                    default:
                        jj_la1[83] = jj_gen;
                }
                jj_consume_token(IDENTIFIER);
                name = token.image;
                if (line == -1) {
                    line = token.beginLine;
                    column = token.beginColumn;
                }
                switch (token_next.kind) {
                    case LPAREN:
                        args = Arguments();
                        hasArgs = true;
                        break;
                    default:
                        jj_la1[84] = jj_gen;
                }
                ret = hasArgs
                        ? new MethodCallExpr(line, column, ret, typeArgs, name, args)
                        : new FieldAccessExpr(line, column, ret, null, name);
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                line = token.beginLine;
                column = token.beginColumn;
                ret = Expression();
                jj_consume_token(RPAREN);
                ret = new EnclosedExpr(line, column, ret);
                break;
            case NEW:
                ret = AllocationExpression(null);
                break;
            default:
                jj_la1[86] = jj_gen;
                if (jj_2_27(2147483647)) {
                    type = ResultType();
                    jj_consume_token(DOT);
                    jj_consume_token(CLASS);
                    ret = new ClassExpr(type.getBeginLine(), type.getBeginColumn(), type);
                } else {
                    switch (token_next.kind) {
                        case IDENTIFIER:
                            jj_consume_token(IDENTIFIER);
                            name = token.image;
                            line = token.beginLine;
                            column = token.beginColumn;
                            switch (token_next.kind) {
                                case LPAREN:
                                    args = Arguments();
                                    hasArgs = true;
                                    break;
                                default:
                                    jj_la1[85] = jj_gen;
                            }
                            ret = hasArgs
                                    ? new MethodCallExpr(line, column, null, null, name, args)
                                    : new NameExpr(line, column, name);
                            break;
                        default:
                            jj_la1[87] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        return ret;
    }

    public Expression PrimarySuffix(Expression scope) throws ParseException {
        Expression ret;
        if (jj_2_28(2)) {
            ret = PrimarySuffixWithoutSuper(scope);
        } else {
            switch (token_next.kind) {
                case DOT:
                    jj_consume_token(DOT);
                    jj_consume_token(SUPER);
                    ret = new SuperExpr(token.beginLine, token.beginColumn, scope);
                    break;
                default:
                    jj_la1[88] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public Expression PrimarySuffixWithoutSuper(Expression scope) throws ParseException {
        Expression ret;
        List<Type> typeArgs = null;
        List<Expression> args = null;
        boolean hasArgs = false;
        String name;
        int line = -1;
        int column = 0;
        switch (token_next.kind) {
            case DOT:
                jj_consume_token(DOT);
                switch (token_next.kind) {
                    case THIS:
                        jj_consume_token(THIS);
                        ret = new ThisExpr(token.beginLine, token.beginColumn, scope);
                        break;
                    case NEW:
                        ret = AllocationExpression(scope);
                        break;
                    default:
                        jj_la1[91] = jj_gen;
                        if (jj_2_29(2147483647)) {
                            switch (token_next.kind) {
                                case LT:
                                    typeArgs = TypeArguments();
                                    line = typeArgs.get(0).getBeginLine();
                                    column = typeArgs.get(0).getBeginColumn();
                                    break;
                                default:
                                    jj_la1[89] = jj_gen;
                            }
                            jj_consume_token(IDENTIFIER);
                            name = token.image;
                            if (line == -1) {
                                line = token.beginLine;
                                column = token.beginColumn;
                            }
                            switch (token_next.kind) {
                                case LPAREN:
                                    args = Arguments();
                                    hasArgs = true;
                                    break;
                                default:
                                    jj_la1[90] = jj_gen;
                            }
                            ret = hasArgs
                                    ? new MethodCallExpr(line, column, scope, typeArgs, name, args)
                                    : new FieldAccessExpr(line, column, scope, typeArgs, name);
                        } else {
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                }
                break;
            case LBRACKET:
                jj_consume_token(LBRACKET);
                line = token.beginLine;
                column = token.beginColumn;
                ret = Expression();
                jj_consume_token(RBRACKET);
                ret = new ArrayAccessExpr(line, column, scope, ret);
                break;
            default:
                jj_la1[92] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression Literal() throws ParseException {
        Expression ret;
        switch (token_next.kind) {
            case INTEGER_LITERAL:
                jj_consume_token(INTEGER_LITERAL);
                ret = new IntegerLiteralExpr(token.beginLine, token.beginColumn, token.image);
                break;
            case LONG_LITERAL:
                jj_consume_token(LONG_LITERAL);
                ret = new LongLiteralExpr(token.beginLine, token.beginColumn, token.image);
                break;
            case FLOATING_POINT_LITERAL:
                jj_consume_token(FLOATING_POINT_LITERAL);
                ret = new DoubleLiteralExpr(token.beginLine, token.beginColumn, token.image);
                break;
            case CHARACTER_LITERAL:
                jj_consume_token(CHARACTER_LITERAL);
                ret = new CharLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
                break;
            case STRING_LITERAL:
                jj_consume_token(STRING_LITERAL);
                ret = new StringLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
                break;
            case FALSE:
            case TRUE:
                ret = BooleanLiteral();
                break;
            case NULL:
                ret = NullLiteral();
                break;
            default:
                jj_la1[93] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression BooleanLiteral() throws ParseException {
        Expression ret;
        switch (token_next.kind) {
            case TRUE:
                jj_consume_token(TRUE);
                ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.TRUE);
                break;
            case FALSE:
                jj_consume_token(FALSE);
                ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.FALSE);
                break;
            default:
                jj_la1[94] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression NullLiteral() throws ParseException {
        jj_consume_token(NULL);
        return new NullLiteralExpr(token.beginLine, token.beginColumn);
    }

    public List<Expression> Arguments() throws ParseException {
        List<Expression> ret = null;
        jj_consume_token(LPAREN);
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                ret = ArgumentList();
                break;
            default:
                jj_la1[95] = jj_gen;
        }
        jj_consume_token(RPAREN);
        return ret;
    }

    public List<Expression> ArgumentList() throws ParseException {
        List<Expression> ret = new LinkedList<Expression>();
        Expression expr;
        expr = Expression();
        ret.add(expr);
        label_37:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[96] = jj_gen;
                    break label_37;
            }
            jj_consume_token(COMMA);
            expr = Expression();
            ret.add(expr);
        }
        return ret;
    }

    public Expression AllocationExpression(Expression scope) throws ParseException {
        Expression ret;
        Type type;
        Object[] arr = null;
        List<Type> typeArgs = null;
        List<BodyDeclaration> anonymousBody = null;
        List<Expression> args;
        int line;
        int column;
        jj_consume_token(NEW);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                type = PrimitiveType();
                arr = ArrayDimsAndInits();
                if (arr[0] instanceof Integer) {
                    ret = new ArrayCreationExpr(line, column, type, null, (Integer) arr[0], (ArrayInitializerExpr) arr[1]);
                } else {
                    ret = new ArrayCreationExpr(line, column, type, null, (List) arr[0], (Integer) arr[1]);
                }
                break;
            case IDENTIFIER:
            case LT:
                switch (token_next.kind) {
                    case LT:
                        typeArgs = TypeArguments();
                        break;
                    default:
                        jj_la1[97] = jj_gen;
                }
                type = ClassOrInterfaceType();
                switch (token_next.kind) {
                    case LBRACKET:
                        arr = ArrayDimsAndInits();
                        if (arr[0] instanceof Integer) {
                            ret = new ArrayCreationExpr(line, column, type, typeArgs, (Integer) arr[0], (ArrayInitializerExpr) arr[1]);
                        } else {
                            ret = new ArrayCreationExpr(line, column, type, typeArgs, (List) arr[0], (Integer) arr[1]);
                        }
                        break;
                    case LPAREN:
                        args = Arguments();
                        if (jj_2_30(2)) {
                            anonymousBody = ClassOrInterfaceBody(false);
                        }
                        ret = new ObjectCreationExpr(line, column, scope, (ClassOrInterfaceType) type, typeArgs, args, anonymousBody);
                        break;
                    default:
                        jj_la1[98] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[99] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    /*
     * The third LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     */
    public Object[] ArrayDimsAndInits() throws ParseException {
        Object[] ret = new Object[2];
        Expression expr;
        List<Expression> inits = null;
        int i = 0;
        if (jj_2_33(2)) {
            while (true) {
                jj_consume_token(LBRACKET);
                expr = Expression();
                inits = add(inits, expr);
                jj_consume_token(RBRACKET);
                if (!jj_2_31(2)) {
                    break;
                }
            }
            while (true) {
                if (!jj_2_32(2)) {
                    break;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
                i++;
            }
            ret[0] = inits;
            ret[1] = i;
        } else {
            switch (token_next.kind) {
                case LBRACKET:
                    label_40:
                    while (true) {
                        jj_consume_token(LBRACKET);
                        jj_consume_token(RBRACKET);
                        i++;
                        switch (token_next.kind) {
                            case LBRACKET:
                                break;
                            default:
                                jj_la1[100] = jj_gen;
                                break label_40;
                        }
                    }
                    expr = ArrayInitializer();
                    ret[0] = i;
                    ret[1] = expr;
                    break;
                default:
                    jj_la1[101] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    /*
 * Statement syntax follows.
 */
    public Statement Statement() throws ParseException {
        Statement ret;
        if (jj_2_34(2)) {
            ret = LabeledStatement();
        } else {
            switch (token_next.kind) {
                case ASSERT:
                    ret = AssertStatement();
                    break;
                case LBRACE:
                    ret = Block();
                    break;
                case SEMICOLON:
                    ret = EmptyStatement();
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    ret = StatementExpression();
                    break;
                case SWITCH:
                    ret = SwitchStatement();
                    break;
                case IF:
                    ret = IfStatement();
                    break;
                case WHILE:
                    ret = WhileStatement();
                    break;
                case DO:
                    ret = DoStatement();
                    break;
                case FOR:
                    ret = ForStatement();
                    break;
                case BREAK:
                    ret = BreakStatement();
                    break;
                case CONTINUE:
                    ret = ContinueStatement();
                    break;
                case RETURN:
                    ret = ReturnStatement();
                    break;
                case THROW:
                    ret = ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    ret = SynchronizedStatement();
                    break;
                case TRY:
                    ret = TryStatement();
                    break;
                default:
                    jj_la1[102] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public AssertStmt AssertStatement() throws ParseException {
        Expression check;
        Expression msg = null;
        int line;
        int column;
        jj_consume_token(ASSERT);
        line = token.beginLine;
        column = token.beginColumn;
        check = Expression();
        switch (token_next.kind) {
            case COLON:
                jj_consume_token(COLON);
                msg = Expression();
                break;
            default:
                jj_la1[103] = jj_gen;
        }
        jj_consume_token(SEMICOLON);
        return new AssertStmt(line, column, check, msg);
    }

    public LabeledStmt LabeledStatement() throws ParseException {
        String label;
        Statement stmt;
        int line;
        int column;
        jj_consume_token(IDENTIFIER);
        line = token.beginLine;
        column = token.beginColumn;
        label = token.image;
        jj_consume_token(COLON);
        stmt = Statement();
        return new LabeledStmt(line, column, label, stmt);
    }

    public BlockStmt Block() throws ParseException {
        List<Statement> stmts;
        int beginLine;
        int beginColumn;
        int endLine;
        int endColumn;
        jj_consume_token(LBRACE);
        beginLine = token.beginLine;
        beginColumn = token.beginColumn;
        stmts = Statements();
        jj_consume_token(RBRACE);
        endLine = token.beginLine;
        endColumn = token.beginColumn;
        return new BlockStmt(beginLine, beginColumn, endLine, endColumn, stmts);
    }

    /*
     * Classes inside block stametents can only be abstract or final. The semantic must check it.
     */
    public Statement BlockStatement() throws ParseException {
        Statement ret;
        Expression expr;
        ClassOrInterfaceDeclaration typeDecl;
        Modifier modifier;
        if (jj_2_35(2147483647)) {
            pushJavadoc();
            modifier = Modifiers();
            typeDecl = ClassOrInterfaceDeclaration(modifier);
            ret = new TypeDeclarationStmt(typeDecl.getBeginLine(), typeDecl.getBeginColumn(), typeDecl);
        } else if (jj_2_36(2147483647)) {
            expr = VariableDeclarationExpression();
            ret = new ExpressionStmt(expr.getBeginLine(), expr.getBeginColumn(), expr);
            jj_consume_token(SEMICOLON);
        } else {
            switch (token_next.kind) {
                case ASSERT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case VOID:
                case WHILE:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                    ret = Statement();
                    break;
                default:
                    jj_la1[104] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public VariableDeclarationExpr VariableDeclarationExpression() throws ParseException {
        Modifier modifier;
        Type type;
        List<VariableDeclarator> vars = new LinkedList<VariableDeclarator>();
        VariableDeclarator var;
        modifier = Modifiers();
        type = Type();
        var = VariableDeclarator();
        vars.add(var);
        label_41:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[105] = jj_gen;
                    break label_41;
            }
            jj_consume_token(COMMA);
            var = VariableDeclarator();
            vars.add(var);
        }

        return new VariableDeclarationExpr(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, vars);
    }

    public EmptyStmt EmptyStatement() throws ParseException {
        jj_consume_token(SEMICOLON);
        return new EmptyStmt(token.beginLine, token.beginColumn);
    }

    public ExpressionStmt StatementExpression() throws ParseException {
        Expression expr;
        AssignExpr.Operator op;
        Expression value;
        switch (token_next.kind) {
            case INCR:
                expr = PreIncrementExpression();
                break;
            case DECR:
                expr = PreDecrementExpression();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
                expr = PrimaryExpression();
                switch (token_next.kind) {
                    case ASSIGN:
                    case INCR:
                    case DECR:
                    case PLUSASSIGN:
                    case MINUSASSIGN:
                    case STARASSIGN:
                    case SLASHASSIGN:
                    case ANDASSIGN:
                    case ORASSIGN:
                    case XORASSIGN:
                    case REMASSIGN:
                    case LSHIFTASSIGN:
                    case RSIGNEDSHIFTASSIGN:
                    case RUNSIGNEDSHIFTASSIGN:
                        switch (token_next.kind) {
                            case INCR:
                                jj_consume_token(INCR);
                                expr = new UnaryExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, UnaryExpr.Operator.posIncrement);
                                break;
                            case DECR:
                                jj_consume_token(DECR);
                                expr = new UnaryExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, UnaryExpr.Operator.posDecrement);
                                break;
                            case ASSIGN:
                            case PLUSASSIGN:
                            case MINUSASSIGN:
                            case STARASSIGN:
                            case SLASHASSIGN:
                            case ANDASSIGN:
                            case ORASSIGN:
                            case XORASSIGN:
                            case REMASSIGN:
                            case LSHIFTASSIGN:
                            case RSIGNEDSHIFTASSIGN:
                            case RUNSIGNEDSHIFTASSIGN:
                                op = AssignmentOperator();
                                value = Expression();
                                expr = new AssignExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, value, op);
                                break;
                            default:
                                jj_la1[106] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        jj_la1[107] = jj_gen;
                }
                break;
            default:
                jj_la1[108] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        return new ExpressionStmt(expr.getBeginLine(), expr.getBeginColumn(), expr);
    }

    public SwitchStmt SwitchStatement() throws ParseException {
        Expression selector;
        SwitchEntryStmt entry;
        List<SwitchEntryStmt> entries = null;
        int line;
        int column;
        jj_consume_token(SWITCH);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(LPAREN);
        selector = Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_42:
        while (true) {
            switch (token_next.kind) {
                case CASE:
                case _DEFAULT:
                    break;
                default:
                    jj_la1[109] = jj_gen;
                    break label_42;
            }
            entry = SwitchEntry();
            entries = add(entries, entry);
        }
        jj_consume_token(RBRACE);
        return new SwitchStmt(line, column, selector, entries);
    }

    public SwitchEntryStmt SwitchEntry() throws ParseException {
        Expression label = null;
        List<Statement> stmts;
        int line;
        int column;
        switch (token_next.kind) {
            case CASE:
                jj_consume_token(CASE);
                line = token.beginLine;
                column = token.beginColumn;
                label = Expression();
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                line = token.beginLine;
                column = token.beginColumn;
                break;
            default:
                jj_la1[110] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(COLON);
        stmts = Statements();
        return new SwitchEntryStmt(line, column, label, stmts);
    }

    public IfStmt IfStatement() throws ParseException {
        Expression condition;
        Statement thenStmt;
        Statement elseStmt = null;
        int line;
        int column;
        jj_consume_token(IF);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(LPAREN);
        condition = Expression();
        jj_consume_token(RPAREN);
        thenStmt = Statement();
        switch (token_next.kind) {
            case ELSE:
                jj_consume_token(ELSE);
                elseStmt = Statement();
                break;
            default:
                jj_la1[111] = jj_gen;
        }
        return new IfStmt(line, column, condition, thenStmt, elseStmt);
    }

    public WhileStmt WhileStatement() throws ParseException {
        Expression condition;
        Statement body;
        int line;
        int column;
        jj_consume_token(WHILE);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(LPAREN);
        condition = Expression();
        jj_consume_token(RPAREN);
        body = Statement();
        return new WhileStmt(line, column, condition, body);
    }

    public DoStmt DoStatement() throws ParseException {
        Expression condition;
        Statement body;
        int line;
        int column;
        jj_consume_token(DO);
        line = token.beginLine;
        column = token.beginColumn;
        body = Statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        condition = Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
        return new DoStmt(line, column, body, condition);
    }

    public Statement ForStatement() throws ParseException {
        VariableDeclarationExpr varExpr = null;
        Expression expr = null;
        List<Expression> init = null;
        List<Expression> update = null;
        Statement body;
        int line;
        int column;
        jj_consume_token(FOR);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(LPAREN);
        if (jj_2_37(2147483647)) {
            varExpr = VariableDeclarationExpression();
            jj_consume_token(COLON);
            expr = Expression();
        } else {
            switch (token_next.kind) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SUPER:
                case SYNCHRONIZED:
                case THIS:
                case TRANSIENT:
                case TRUE:
                case VOID:
                case VOLATILE:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case AT:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    switch (token_next.kind) {
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FALSE:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NATIVE:
                        case NEW:
                        case NULL:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case STRICTFP:
                        case SUPER:
                        case SYNCHRONIZED:
                        case THIS:
                        case TRANSIENT:
                        case TRUE:
                        case VOID:
                        case VOLATILE:
                        case LONG_LITERAL:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                        case AT:
                        case BANG:
                        case TILDE:
                        case INCR:
                        case DECR:
                        case PLUS:
                        case MINUS:
                            init = ForInit();
                            break;
                        default:
                            jj_la1[112] = jj_gen;
                    }
                    jj_consume_token(SEMICOLON);
                    switch (token_next.kind) {
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case LONG_LITERAL:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                        case BANG:
                        case TILDE:
                        case INCR:
                        case DECR:
                        case PLUS:
                        case MINUS:
                            expr = Expression();
                            break;
                        default:
                            jj_la1[113] = jj_gen;
                    }
                    jj_consume_token(SEMICOLON);
                    switch (token_next.kind) {
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case LONG_LITERAL:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                        case BANG:
                        case TILDE:
                        case INCR:
                        case DECR:
                        case PLUS:
                        case MINUS:
                            update = ForUpdate();
                            break;
                        default:
                            jj_la1[114] = jj_gen;
                    }
                    break;
                default:
                    jj_la1[115] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(RPAREN);
        body = Statement();
        if (varExpr != null) {
            {
                return new ForeachStmt(line, column, varExpr, expr, body);
            }
        }
        return new ForStmt(line, column, init, expr, update, body);
    }

    public List<Expression> ForInit() throws ParseException {
        List<Expression> ret;
        Expression expr;
        if (jj_2_38(2147483647)) {
            expr = VariableDeclarationExpression();
            ret = new LinkedList<Expression>();
            ret.add(expr);
        } else {
            switch (token_next.kind) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case LONG_LITERAL:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    ret = ExpressionList();
                    break;
                default:
                    jj_la1[116] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public List<Expression> ExpressionList() throws ParseException {
        List<Expression> ret = new LinkedList<Expression>();
        Expression expr;
        expr = Expression();
        ret.add(expr);
        label_43:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[117] = jj_gen;
                    break label_43;
            }
            jj_consume_token(COMMA);
            expr = Expression();
            ret.add(expr);
        }
        return ret;
    }

    public List<Expression> ForUpdate() throws ParseException {
        List<Expression> ret;
        ret = ExpressionList();
        return ret;
    }

    public BreakStmt BreakStatement() throws ParseException {
        String id = null;
        int line;
        int column;
        jj_consume_token(BREAK);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                id = token.image;
                break;
            default:
                jj_la1[118] = jj_gen;
        }
        jj_consume_token(SEMICOLON);
        return new BreakStmt(line, column, id);
    }

    public ContinueStmt ContinueStatement() throws ParseException {
        String id = null;
        int line;
        int column;
        jj_consume_token(CONTINUE);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                id = token.image;
                break;
            default:
                jj_la1[119] = jj_gen;
        }
        jj_consume_token(SEMICOLON);
        return new ContinueStmt(line, column, id);
    }

    public ReturnStmt ReturnStatement() throws ParseException {
        Expression expr = null;
        int line;
        int column;
        jj_consume_token(RETURN);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                expr = Expression();
                break;
            default:
                jj_la1[120] = jj_gen;
        }
        jj_consume_token(SEMICOLON);
        return new ReturnStmt(line, column, expr);
    }

    public ThrowStmt ThrowStatement() throws ParseException {
        Expression expr;
        int line;
        int column;
        jj_consume_token(THROW);
        line = token.beginLine;
        column = token.beginColumn;
        expr = Expression();
        jj_consume_token(SEMICOLON);
        return new ThrowStmt(line, column, expr);
    }

    public SynchronizedStmt SynchronizedStatement() throws ParseException {
        Expression expr;
        BlockStmt block;
        int line;
        int column;
        jj_consume_token(SYNCHRONIZED);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(LPAREN);
        expr = Expression();
        jj_consume_token(RPAREN);
        block = Block();
        return new SynchronizedStmt(line, column, expr, block);
    }

    public TryStmt TryStatement() throws ParseException {
        BlockStmt tryBlock;
        BlockStmt finallyBlock = null;
        List<CatchClause> catchs = null;
        Parameter except;
        BlockStmt catchBlock;
        int line;
        int column;
        int cLine;
        int cColumn;
        jj_consume_token(TRY);
        line = token.beginLine;
        column = token.beginColumn;
        tryBlock = Block();
        switch (token_next.kind) {
            case CATCH:
                label_44:
                while (true) {
                    jj_consume_token(CATCH);
                    cLine = token.beginLine;
                    cColumn = token.beginColumn;
                    jj_consume_token(LPAREN);
                    except = FormalParameter();
                    jj_consume_token(RPAREN);
                    catchBlock = Block();
                    catchs = add(catchs, new CatchClause(cLine, cColumn, except, catchBlock));
                    switch (token_next.kind) {
                        case CATCH:
                            break;
                        default:
                            jj_la1[121] = jj_gen;
                            break label_44;
                    }
                }
                switch (token_next.kind) {
                    case FINALLY:
                        jj_consume_token(FINALLY);
                        finallyBlock = Block();
                        break;
                    default:
                        jj_la1[122] = jj_gen;
                }
                break;
            case FINALLY:
                jj_consume_token(FINALLY);
                finallyBlock = Block();
                break;
            default:
                jj_la1[123] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return new TryStmt(line, column, tryBlock, catchs, finallyBlock);
    }

    /* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
    public void RUNSIGNEDSHIFT() throws ParseException {
        if (getToken(1).kind != GT ||
                ((Token.GTToken) getToken(1)).realKind != RUNSIGNEDSHIFT) {
            jj_consume_token(-1);
            throw new ParseException();
        }
        jj_consume_token(GT);
        jj_consume_token(GT);
        jj_consume_token(GT);
    }

    public void RSIGNEDSHIFT() throws ParseException {
        if (getToken(1).kind != GT ||
                ((Token.GTToken) getToken(1)).realKind != RSIGNEDSHIFT) {
            jj_consume_token(-1);
            throw new ParseException();
        }
        jj_consume_token(GT);
        jj_consume_token(GT);
    }

    /* Annotation syntax follows. */
    public AnnotationExpr Annotation() throws ParseException {
        AnnotationExpr ret;
        if (jj_2_39(2147483647)) {
            ret = NormalAnnotation();
        } else if (jj_2_40(2147483647)) {
            ret = SingleMemberAnnotation();
        } else {
            switch (token_next.kind) {
                case AT:
                    ret = MarkerAnnotation();
                    break;
                default:
                    jj_la1[124] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        return ret;
    }

    public NormalAnnotationExpr NormalAnnotation() throws ParseException {
        NameExpr name;
        List<MemberValuePair> pairs = null;
        int line;
        int column;
        jj_consume_token(AT);
        line = token.beginLine;
        column = token.beginColumn;
        name = Name();
        jj_consume_token(LPAREN);
        switch (token_next.kind) {
            case IDENTIFIER:
                pairs = MemberValuePairs();
                break;
            default:
                jj_la1[125] = jj_gen;
        }
        jj_consume_token(RPAREN);
        return new NormalAnnotationExpr(line, column, name, pairs);
    }

    public MarkerAnnotationExpr MarkerAnnotation() throws ParseException {
        NameExpr name;
        int line;
        int column;
        jj_consume_token(AT);
        line = token.beginLine;
        column = token.beginColumn;
        name = Name();
        return new MarkerAnnotationExpr(line, column, name);
    }

    public SingleMemberAnnotationExpr SingleMemberAnnotation() throws ParseException {
        NameExpr name;
        Expression memberVal;
        int line;
        int column;
        jj_consume_token(AT);
        line = token.beginLine;
        column = token.beginColumn;
        name = Name();
        jj_consume_token(LPAREN);
        memberVal = MemberValue();
        jj_consume_token(RPAREN);
        return new SingleMemberAnnotationExpr(line, column, name, memberVal);
    }

    public List<MemberValuePair> MemberValuePairs() throws ParseException {
        List<MemberValuePair> ret = new LinkedList<MemberValuePair>();
        MemberValuePair pair;
        pair = MemberValuePair();
        ret.add(pair);
        label_45:
        while (true) {
            switch (token_next.kind) {
                case COMMA:
                    break;
                default:
                    jj_la1[126] = jj_gen;
                    break label_45;
            }
            jj_consume_token(COMMA);
            pair = MemberValuePair();
            ret.add(pair);
        }
        return ret;
    }

    public MemberValuePair MemberValuePair() throws ParseException {
        String name;
        Expression value;
        int line;
        int column;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(ASSIGN);
        value = MemberValue();
        return new MemberValuePair(line, column, name, value);
    }

    public Expression MemberValue() throws ParseException {
        Expression ret;
        switch (token_next.kind) {
            case AT:
                ret = Annotation();
                break;
            case LBRACE:
                ret = MemberValueArrayInitializer();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                ret = ConditionalExpression();
                break;
            default:
                jj_la1[127] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public Expression MemberValueArrayInitializer() throws ParseException {
        List<Expression> ret = new LinkedList<Expression>();
        Expression member;
        int line;
        int column;
        jj_consume_token(LBRACE);
        line = token.beginLine;
        column = token.beginColumn;
        switch (token_next.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case LONG_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case AT:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                member = MemberValue();
                ret.add(member);
                while (true) {
                    if (!jj_2_41(2)) {
                        break;
                    }
                    jj_consume_token(COMMA);
                    member = MemberValue();
                    ret.add(member);
                }
                break;
            default:
                jj_la1[128] = jj_gen;
        }
        switch (token_next.kind) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[129] = jj_gen;
        }
        jj_consume_token(RBRACE);
        return new ArrayInitializerExpr(line, column, ret);
    }

    /* Annotation Types. */
    public AnnotationDeclaration AnnotationTypeDeclaration(Modifier modifier) throws ParseException {
        String name;
        List<BodyDeclaration> members;
        int line;
        int column;
        jj_consume_token(AT);
        line = token.beginLine;
        column = token.beginColumn;
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENTIFIER);
        name = token.image;
        members = AnnotationTypeBody();

        return new AnnotationDeclaration(line, column, popJavadoc(), modifier.modifiers, modifier.annotations, name, members);
    }

    public List<BodyDeclaration> AnnotationTypeBody() throws ParseException {
        List<BodyDeclaration> ret = null;
        BodyDeclaration member;
        jj_consume_token(LBRACE);
        label_47:
        while (true) {
            switch (token_next.kind) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case IDENTIFIER:
                case SEMICOLON:
                case AT:
                    break;
                default:
                    jj_la1[130] = jj_gen;
                    break label_47;
            }
            member = AnnotationBodyDeclaration();
            ret = add(ret, member);
        }
        jj_consume_token(RBRACE);
        return ret;
    }

    public BodyDeclaration AnnotationBodyDeclaration() throws ParseException {
        Modifier modifier;
        BodyDeclaration ret;
        pushJavadoc();
        switch (token_next.kind) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                ret = new EmptyTypeDeclaration(token.beginLine, token.beginColumn, popJavadoc());
                break;
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case ENUM:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case IDENTIFIER:
            case AT:
                modifier = Modifiers();
                if (jj_2_42(2147483647)) {
                    ret = AnnotationTypeMemberDeclaration(modifier);
                } else {
                    switch (token_next.kind) {
                        case CLASS:
                        case INTERFACE:
                            ret = ClassOrInterfaceDeclaration(modifier);
                            break;
                        case ENUM:
                            ret = EnumDeclaration(modifier);
                            break;
                        case AT:
                            ret = AnnotationTypeDeclaration(modifier);
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                        case IDENTIFIER:
                            ret = FieldDeclaration(modifier);
                            break;
                        default:
                            jj_la1[131] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            default:
                jj_la1[132] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        return ret;
    }

    public AnnotationMemberDeclaration AnnotationTypeMemberDeclaration(Modifier modifier) throws ParseException {
        Type type;
        String name;
        Expression defaultVal = null;
        type = Type();
        jj_consume_token(IDENTIFIER);
        name = token.image;
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch (token_next.kind) {
            case _DEFAULT:
                defaultVal = DefaultValue();
                break;
            default:
                jj_la1[133] = jj_gen;
        }
        jj_consume_token(SEMICOLON);

        return new AnnotationMemberDeclaration(type.getBeginLine(), type.getBeginColumn(), popJavadoc(), modifier.modifiers, modifier.annotations, type, name, defaultVal);
    }

    public Expression DefaultValue() throws ParseException {
        Expression ret;
        jj_consume_token(_DEFAULT);
        ret = MemberValue();
        return ret;
    }

    private boolean jj_2_1(int maximumLookAhead) {
        mCurrentLookAhead = maximumLookAhead;
        last_position = scan_position = token;
        try {
            return !scan_package_declaration();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(0, maximumLookAhead);
        }
    }

    private boolean jj_2_2(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !scan_modifier();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_3();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_4();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_5();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_65();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_7();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_67();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_9();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_10();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_70();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_12();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_13();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_71();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_15();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_71();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    /**
     * Scan if there is at least one more part corresponding to a
     * qualified identifier (ie : a dot followed by an alphanumerical identifier)
     *
     * @param maxLookAhead the maximum look-ahead allowed
     * @return true if there are still parts, false otherwise
     */
    private boolean scan_identifier_continues(int maxLookAhead) {
        mCurrentLookAhead = maxLookAhead;
        last_position = scan_position = token;
        try {
            return !scan_dot_identifier();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(16, maxLookAhead);
        }
    }

    private boolean jj_2_18(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_18();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_19();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_75();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_76();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_77();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_23();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_24();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_80();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_81();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_27();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_81();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_29();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_84();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_31();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_32();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_33();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !scan_label();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_35();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3R_87();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_37();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_38();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_39();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !scan_annotation_open();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_41();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        mCurrentLookAhead = xla;
        last_position = scan_position = token;
        try {
            return !jj_3_42();
        } catch (LookAheadException ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_3R_321() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_336()) scan_position = xsp;
        return jj_scan_token(RPAREN);
    }

    private boolean jj_3R_199() {
        if (scan_condition()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_227()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_326() {
        return jj_scan_token(THROWS) || jj_3R_337();
    }

    private boolean jj_3R_144() {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_199()) scan_position = xsp;
        return jj_scan_token(RPAREN);
    }


    private boolean jj_3R_246() {
        Token xsp;
        xsp = scan_position;
        if (scan_class_generic_type_parameters()) scan_position = xsp;
        if (jj_3R_82()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_321()) return true;
        while (true) {
            xsp = scan_position;
            if (jj_3R_325()) {
                scan_position = xsp;
                break;
            }
        }
        xsp = scan_position;
        if (jj_3R_326()) scan_position = xsp;
        xsp = scan_position;
        if (scan_brace_block()) {
            scan_position = xsp;
            if (jj_scan_token(SEMICOLON)) return true;
        }
        return false;
    }

    private boolean jj_3R_228() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(TRUE)) {
            scan_position = xsp;
            if (jj_scan_token(FALSE)) return true;
        }
        return false;
    }

    private boolean jj_3R_142() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_263()) scan_position = xsp;
        xsp = scan_position;
        if (jj_scan_token(COMMA)) scan_position = xsp;
        return jj_scan_token(RBRACE);
    }


    private boolean jj_3R_165() {
        return jj_scan_token(ASSIGN) || jj_3R_66();
    }

    private boolean jj_3R_66() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_142()) {
            scan_position = xsp;
            if (scan_condition()) return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_164() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_196()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3_29() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        return jj_scan_token(IDENTIFIER);
    }

    private boolean jj_3R_181() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(INTEGER_LITERAL)) {
            scan_position = xsp;
            if (jj_scan_token(LONG_LITERAL)) {
                scan_position = xsp;
                if (jj_scan_token(FLOATING_POINT_LITERAL)) {
                    scan_position = xsp;
                    if (jj_scan_token(CHARACTER_LITERAL)) {
                        scan_position = xsp;
                        if (jj_scan_token(STRING_LITERAL)) {
                            scan_position = xsp;
                            if (jj_3R_228()) {
                                scan_position = xsp;
                                if (jj_scan_token(NULL)) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_126() {
        return jj_scan_token(LBRACKET) || scan_condition() || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_130() {
        if (jj_3R_164()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_165()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_162() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = scan_position;
        if (jj_3R_144()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_324() {
        return jj_scan_token(COMMA) || jj_3R_130();
    }

    private boolean jj_3_5() {
        if (jj_3R_63()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_64()) {
                scan_position = xsp;
                break;
            }
        }
        xsp = scan_position;
        if (jj_scan_token(COMMA)) {
            scan_position = xsp;
            if (jj_scan_token(ASSIGN)) {
                scan_position = xsp;
                if (jj_scan_token(SEMICOLON)) return true;
            }
        }
        return false;
    }

    private boolean jj_3_4() {
        Token xsp;
        xsp = scan_position;
        if (scan_class_generic_type_parameters()) scan_position = xsp;
        return jj_scan_token(IDENTIFIER) || jj_scan_token(LPAREN);
    }

    private boolean jj_3R_245() {
        if (jj_3R_63()) return true;
        if (jj_3R_130()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_324()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_125() {
        if (jj_scan_token(DOT)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(THIS)) {
            scan_position = xsp;
            if (jj_3R_184()) {
                scan_position = xsp;
                if (jj_3R_162()) return true;
            }
        }
        return false;
    }


    private boolean jj_3R_81() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_125()) {
            scan_position = xsp;
            if (jj_3R_126()) return true;
        }
        return false;
    }

    private boolean jj_3R_124() {
        return jj_scan_token(DOT) || jj_scan_token(SUPER);
    }


    private boolean jj_3R_194() {
        if (scan_modifiers()) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_class_raw_signature()) {
            scan_position = xsp;
            if (jj_3R_242()) {
                scan_position = xsp;
                if (jj_3R_243()) {
                    scan_position = xsp;
                    if (jj_3R_244()) {
                        scan_position = xsp;
                        if (jj_3R_245()) {
                            scan_position = xsp;
                            if (jj_3R_246()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_373() {
        return jj_scan_token(_DEFAULT) || jj_3R_90();
    }


    private boolean jj_3R_80() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_81()) {
            scan_position = xsp;
            if (jj_3R_124()) return true;
        }
        return false;
    }

    private boolean jj_3_27() {
        return jj_3R_82() || jj_scan_token(DOT) || jj_scan_token(CLASS);
    }


    private boolean jj_3R_153() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_144()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_361() {
        if (jj_3R_63()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_scan_token(RPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_373()) scan_position = xsp;
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_163() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_65()) {
            scan_position = xsp;
            if (jj_3R_194()) {
                scan_position = xsp;
                if (jj_scan_token(SEMICOLON)) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_152() {
        return jj_3R_82() || jj_scan_token(DOT) || jj_scan_token(CLASS);
    }

    private boolean jj_3_42() {
        return jj_3R_63() || jj_scan_token(IDENTIFIER) || jj_scan_token(LPAREN);
    }


    private boolean jj_3R_150() {
        return jj_scan_token(LPAREN) || scan_condition() || jj_scan_token(RPAREN);
    }


    private boolean jj_3R_84() {
        // {...}
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_163()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(RBRACE);
    }


    private boolean jj_3_41() {
        return jj_scan_token(COMMA) || jj_3R_90();
    }

    private boolean jj_3_3() {
        return jj_scan_token(COMMA) || jj_3R_61();
    }

    private boolean jj_3R_149() {
        if (jj_scan_token(SUPER)) return true;
        if (jj_scan_token(DOT)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = scan_position;
        if (jj_3R_144()) scan_position = xsp;
        return false;
    }


    /**
     * Scans a compound type extension (eg: "& Bar" in "T extends Foo & Bar")
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_compound_type_extension() {
        return jj_scan_token(BIT_AND) || scan_parent_type();
    }

    private boolean jj_3R_351() {
        if (scan_modifiers()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_361()) {
            scan_position = xsp;
            if (scan_class_raw_signature()) {
                scan_position = xsp;
                if (jj_3R_242()) {
                    scan_position = xsp;
                    if (jj_3R_243()) {
                        scan_position = xsp;
                        if (jj_3R_245()) return true;
                    }
                }
            }
        }
        return false;
    }


    /**
     * Scans the extensions of a generic type (eg: extends Foo, Bar)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_generic_type_extensions() {
        if (jj_scan_token(EXTENDS)) return true;
        if (scan_parent_type()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_compound_type_extension()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_343() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(SEMICOLON)) {
            scan_position = xsp;
            if (jj_3R_351()) return true;
        }
        return false;
    }

    private boolean jj_3R_102() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_181()) {
            scan_position = xsp;
            if (jj_scan_token(THIS)) {
                scan_position = xsp;
                if (jj_3R_149()) {
                    scan_position = xsp;
                    if (jj_3R_150()) {
                        scan_position = xsp;
                        if (jj_3R_184()) {
                            scan_position = xsp;
                            if (jj_3R_152()) {
                                scan_position = xsp;
                                if (jj_3R_153()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    /**
     * Scans a generic type declaration (eg : T extends Foo, Bar)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_generic_type() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_generic_type_extensions()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_320() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_343()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(RBRACE);
    }


    /**
     * Scans additional generic type after a first one (eg: ,E extends Spam)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_additional_generic_type() {
        return jj_scan_token(COMMA) || scan_generic_type();
    }

    /**
     * Scans a class generic type (eg : &lt;T extends Foo, E extends Bar&lt;Spam>>)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_class_generic_type_parameters() {
        if (jj_scan_token(LT)) return true;
        if (scan_generic_type()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_additional_generic_type()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(GT);
    }

    private boolean jj_3R_68() {
        if (jj_3R_102()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_81()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_243() {
        return jj_scan_token(AT) || jj_scan_token(INTERFACE) || jj_scan_token(IDENTIFIER) || jj_3R_320();
    }


    private boolean jj_3R_236() {
        if (jj_3R_102()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_80()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_61() {
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_92()) {
                scan_position = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = scan_position;
        if (jj_3R_144()) scan_position = xsp;
        xsp = scan_position;
        if (jj_3R_84()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_265() {
        return jj_scan_token(COMMA) || jj_3R_264();
    }

    private boolean jj_3R_284() {
        if (jj_3R_90()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3_41()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_319() {
        if (jj_scan_token(SEMICOLON)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_163()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_257() {
        return jj_scan_token(LPAREN) || jj_3R_63() || jj_scan_token(RPAREN) || jj_3R_159();
    }

    private boolean jj_3R_166() {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_284()) scan_position = xsp;
        xsp = scan_position;
        if (jj_scan_token(COMMA)) scan_position = xsp;
        return jj_scan_token(RBRACE);
    }

    private boolean jj_3_24() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(INCR)) {
            scan_position = xsp;
            if (jj_scan_token(DECR)) return true;
        }
        return false;
    }

    private boolean jj_3R_318() {
        if (jj_3R_61()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3_3()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_258() {
        if (jj_3R_236()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3_24()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_90() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_92()) {
            scan_position = xsp;
            if (jj_3R_166()) {
                scan_position = xsp;
                if (jj_3R_119()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_242() {
        if (jj_scan_token(ENUM)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_class_implements_types()) scan_position = xsp;
        if (jj_scan_token(LBRACE)) return true;
        xsp = scan_position;
        if (jj_3R_318()) scan_position = xsp;
        xsp = scan_position;
        if (jj_scan_token(COMMA)) scan_position = xsp;
        xsp = scan_position;
        if (jj_3R_319()) scan_position = xsp;
        return jj_scan_token(RBRACE);
    }

    private boolean jj_3_23() {
        return jj_scan_token(LPAREN) || jj_3R_63() || jj_scan_token(LBRACKET);
    }

    private boolean jj_3R_264() {
        return jj_scan_token(IDENTIFIER) || jj_scan_token(ASSIGN) || jj_3R_90();
    }

    private boolean jj_3R_123() {
        return jj_scan_token(LPAREN) || jj_3R_63() || jj_scan_token(RPAREN) || jj_3R_159();
    }

    private boolean jj_3R_122() {
        return jj_scan_token(LPAREN) || jj_3R_63() || jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_77() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_122()) {
            scan_position = xsp;
            if (jj_3R_123()) return true;
        }
        return false;
    }


    /**
     * Scans additional types in a list (like a list of interface, eg : , FooListener, BarListener)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_additional_types() {
        return jj_scan_token(COMMA) || scan_parent_type();
    }

    private boolean jj_3R_247() {
        if (jj_3R_264()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_265()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean scan_class_implements_types() {
        if (jj_scan_token(IMPLEMENTS)) return true;
        if (scan_parent_type()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_additional_types()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_237() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(TILDE)) {
            scan_position = xsp;
            if (jj_scan_token(BANG)) return true;
        }
        return jj_3R_159();
    }


    private boolean jj_3R_168() {
        return jj_scan_token(AT) || scan_qualified_identifier() || jj_scan_token(LPAREN) || jj_3R_90() || jj_scan_token(RPAREN);
    }

    private boolean jj_3R_214() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_237()) {
            scan_position = xsp;
            if (jj_3R_257()) {
                scan_position = xsp;
                if (jj_3R_258()) return true;
            }
        }
        return false;
    }


    private boolean jj_3R_89() {
        return jj_scan_token(IDENTIFIER) || jj_scan_token(ASSIGN);
    }

    /**
     * Scans a class's parent in the class definition (eg: "extends String")
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_class_extends_type() {
        if (jj_scan_token(EXTENDS)) return true;
        if (scan_parent_type()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_additional_types()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Scans for an Annotation use without parenthesis nor params, eg : "@Foo"
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_simple_annotation() {
        return jj_scan_token(AT) || scan_qualified_identifier();
    }

    private boolean jj_3R_213() {
        return jj_scan_token(DECR) || jj_3R_236();
    }


    /**
     * Scans for an Annotation use including the opening paren for params, eg : "@Foo("
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_annotation_open() {
        return jj_scan_token(AT) || scan_qualified_identifier() || jj_scan_token(LPAREN);
    }


    private boolean jj_3_39() {
        if (jj_scan_token(AT)) return true;
        if (scan_qualified_identifier()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_89()) {
            scan_position = xsp;
            if (jj_scan_token(RPAREN)) return true;
        }
        return false;
    }

    private boolean jj_3R_167() {
        if (jj_scan_token(AT)) return true;
        if (scan_qualified_identifier()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_247()) scan_position = xsp;
        return jj_scan_token(RPAREN);
    }

    /**
     * Scans a class raw signature (only the class name, generics and parent types)
     * <p/>
     * eg: class Foo &lt;T> extends Bar implements Spam, Bacon
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_class_raw_signature() {
        Token xsp;
        xsp = scan_position;

        // class or interface
        if (jj_scan_token(CLASS)) {
            scan_position = xsp;
            if (jj_scan_token(INTERFACE)) return true;
        }

        // identifier
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = scan_position;

        // Generic params ? <T> / <E extends Foo>
        if (scan_class_generic_type_parameters()) scan_position = xsp;
        xsp = scan_position;

        // Parent class ? extends Bar
        if (scan_class_extends_type()) scan_position = xsp;
        xsp = scan_position;

        // Parent interfaces ? implements Bacon, Egg, Spam<String>
        if (scan_class_implements_types()) scan_position = xsp;

        return jj_3R_84();
    }

    private boolean jj_3R_212() {
        return jj_scan_token(INCR) || jj_3R_236();
    }


    private boolean jj_3R_92() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_167()) {
            scan_position = xsp;
            if (jj_3R_168()) {
                scan_position = xsp;
                if (scan_simple_annotation()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_188() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(PLUS)) {
            scan_position = xsp;
            if (jj_scan_token(MINUS)) return true;
        }
        return jj_3R_159();
    }

    private boolean jj_3R_75() {
        lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken) getToken(1)).realKind == RSIGNEDSHIFT;
        lookingAhead = false;
        return !jj_semLA || jj_scan_token(GT) || jj_scan_token(GT);
    }

    private boolean jj_3R_159() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_188()) {
            scan_position = xsp;
            if (jj_3R_212()) {
                scan_position = xsp;
                if (jj_3R_213()) {
                    scan_position = xsp;
                    if (jj_3R_214()) return true;
                }
            }
        }
        return false;
    }

    /**
     * Scans a single catch block
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_catch_block() {
        return jj_scan_token(CATCH) || jj_scan_token(LPAREN) || jj_3R_344() || jj_scan_token(RPAREN) || scan_brace_block();
    }

    /**
     * Scans a finally block
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_finally_block() {
        return jj_scan_token(FINALLY) || scan_brace_block();
    }


    private boolean jj_3R_76() {
        lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken) getToken(1)).realKind == RUNSIGNEDSHIFT;
        lookingAhead = false;
        return !jj_semLA || jj_scan_token(GT) || jj_scan_token(GT) || jj_scan_token(GT);
    }

    private boolean jj_3R_347() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(STAR)) {
            scan_position = xsp;
            if (jj_scan_token(SLASH)) {
                scan_position = xsp;
                if (jj_scan_token(REM)) return true;
            }
        }
        return jj_3R_159();
    }

    /**
     * Scans a multiple catch blocks and an optional finally block
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_catch_finally_blocks() {
        Token xsp;
        if (scan_catch_block()) return true;
        while (true) {
            xsp = scan_position;
            if (scan_catch_block()) {
                scan_position = xsp;
                break;
            }
        }
        xsp = scan_position;
        if (scan_finally_block()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_312() {
        if (jj_3R_159()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_347()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_338() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(PLUS)) {
            scan_position = xsp;
            if (jj_scan_token(MINUS)) return true;
        }
        return jj_3R_312();
    }

    /**
     * Scans a full try-catch-finally block
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_try_catch_finally_block() {
        if (jj_scan_token(TRY)) return true;
        if (scan_brace_block()) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_catch_finally_blocks()) {
            scan_position = xsp;
            if (scan_finally_block()) return true;
        }
        return false;
    }


    private boolean jj_3R_308() {
        if (jj_3R_312()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_338()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean scan_modifier() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(PUBLIC)) {
            scan_position = xsp;
            if (jj_scan_token(STATIC)) {
                scan_position = xsp;
                if (jj_scan_token(PROTECTED)) {
                    scan_position = xsp;
                    if (jj_scan_token(PRIVATE)) {
                        scan_position = xsp;
                        if (jj_scan_token(FINAL)) {
                            scan_position = xsp;
                            if (jj_scan_token(ABSTRACT)) {
                                scan_position = xsp;
                                if (jj_scan_token(SYNCHRONIZED)) {
                                    scan_position = xsp;
                                    if (jj_scan_token(NATIVE)) {
                                        scan_position = xsp;
                                        if (jj_scan_token(TRANSIENT)) {
                                            scan_position = xsp;
                                            if (jj_scan_token(VOLATILE)) {
                                                scan_position = xsp;
                                                if (jj_scan_token(STRICTFP)) {
                                                    scan_position = xsp;
                                                    if (jj_3R_92()) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean scan_modifiers() {
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_modifier()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3_19() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(LSHIFT)) {
            scan_position = xsp;
            if (jj_3R_75()) {
                scan_position = xsp;
                if (jj_3R_76()) return true;
            }
        }
        return jj_3R_308();
    }

    private boolean jj_3R_309() {
        return jj_scan_token(INSTANCEOF) || jj_3R_63();
    }

    private boolean jj_3R_306() {
        if (jj_3R_308()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3_19()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_297() {
        // synchronized ( ???) {
        return jj_scan_token(SYNCHRONIZED) || jj_scan_token(LPAREN) || scan_condition() || jj_scan_token(RPAREN) || scan_brace_block();
    }

    private boolean jj_3R_313() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(LT)) {
            scan_position = xsp;
            if (jj_scan_token(GT)) {
                scan_position = xsp;
                if (jj_scan_token(LE)) {
                    scan_position = xsp;
                    if (jj_scan_token(GE)) return true;
                }
            }
        }
        return jj_3R_306();
    }

    private boolean jj_3R_296() {
        return jj_scan_token(THROW) || scan_condition() || jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_304() {
        if (jj_3R_306()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_313()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    /**
     * Scans for a package declaration (eg: "package com.sample.test;")
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_package_declaration() {
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_92()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(PACKAGE) || scan_qualified_identifier() || jj_scan_token(SEMICOLON);
    }


    private boolean jj_3R_295() {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_condition()) scan_position = xsp;
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_391() {
        return jj_scan_token(COMMA) || scan_condition();
    }

    private boolean jj_3R_305() {
        return jj_scan_token(BIT_AND) || jj_3R_282();
    }

    private boolean jj_3R_299() {
        if (jj_3R_304()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_309()) scan_position = xsp;
        return false;
    }

    private boolean scan_else_block() {
        return jj_scan_token(ELSE) || scan_statement_or_block();
    }

    private boolean jj_3R_294() {
        if (jj_scan_token(CONTINUE)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(IDENTIFIER)) scan_position = xsp;
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_307() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(EQ)) {
            scan_position = xsp;
            if (jj_scan_token(NE)) return true;
        }
        return jj_3R_299();
    }

    private boolean jj_3R_300() {
        return jj_scan_token(XOR) || jj_3R_254();
    }


    private boolean jj_3R_283() {
        return jj_scan_token(BIT_OR) || jj_3R_235();
    }

    private boolean jj_3R_282() {
        if (jj_3R_299()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_307()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_293() {
        if (jj_scan_token(BREAK)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(IDENTIFIER)) scan_position = xsp;
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_259() {
        return jj_scan_token(SC_AND) || jj_3R_209();
    }

    private boolean jj_3R_254() {
        if (jj_3R_282()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_305()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_240() {
        return jj_scan_token(SC_OR) || jj_3R_187();
    }

    private boolean jj_3_38() {
        return scan_modifiers() || jj_3R_63() || jj_scan_token(IDENTIFIER);
    }

    private boolean jj_3R_235() {
        if (jj_3R_254()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_300()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_390() {
        if (scan_condition()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_391()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_209() {
        if (jj_3R_235()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_283()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_386() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_87()) {
            scan_position = xsp;
            if (jj_3R_390()) return true;
        }
        return false;
    }

    private boolean jj_3R_187() {
        if (jj_3R_209()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_259()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_37() {
        return jj_3R_87() || jj_scan_token(COLON);
    }

    private boolean jj_3R_158() {
        if (jj_3R_187()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_240()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3R_367() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_386()) scan_position = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = scan_position;
        if (scan_condition()) scan_position = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = scan_position;
        if (jj_3R_390()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_366() {
        return jj_3R_87() || jj_scan_token(COLON) || scan_condition();
    }

    private boolean jj_3R_215() {
        return jj_scan_token(HOOK) || scan_condition() || jj_scan_token(COLON) || jj_3R_119();
    }

    private boolean jj_3R_119() {
        if (jj_3R_158()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_215()) scan_position = xsp;
        return false;
    }

    /**
     * Scans a for statement :
     * for ( ??? : ???) { ... }
     * or
     * for (??? ; ??? ; ???) { ... }
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_for_block() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_366()) {
            scan_position = xsp;
            if (jj_3R_367()) return true;
        }
        return jj_scan_token(RPAREN) || scan_statement_or_block();
    }

    /**
     * Scans a do while statement
     * do { ... } while (???);
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_do_while_block() {

        return jj_scan_token(DO) ||
                scan_statement_or_block() ||
                jj_scan_token(WHILE) ||
                jj_scan_token(LPAREN) || scan_condition() || jj_scan_token(RPAREN) ||
                jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_72() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(ASSIGN)) {
            scan_position = xsp;
            if (jj_scan_token(STARASSIGN)) {
                scan_position = xsp;
                if (jj_scan_token(SLASHASSIGN)) {
                    scan_position = xsp;
                    if (jj_scan_token(REMASSIGN)) {
                        scan_position = xsp;
                        if (jj_scan_token(PLUSASSIGN)) {
                            scan_position = xsp;
                            if (jj_scan_token(MINUSASSIGN)) {
                                scan_position = xsp;
                                if (jj_scan_token(LSHIFTASSIGN)) {
                                    scan_position = xsp;
                                    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) {
                                        scan_position = xsp;
                                        if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) {
                                            scan_position = xsp;
                                            if (jj_scan_token(ANDASSIGN)) {
                                                scan_position = xsp;
                                                if (jj_scan_token(XORASSIGN)) {
                                                    scan_position = xsp;
                                                    if (jj_scan_token(ORASSIGN)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_346() {
        return jj_scan_token(COMMA) || scan_qualified_identifier();
    }

    private boolean scan_while_block() {
        return jj_scan_token(WHILE) || jj_scan_token(LPAREN) || scan_condition() || jj_scan_token(RPAREN) || scan_statement_or_block();
    }

    private boolean jj_3_18() {
        return jj_3R_72() || scan_condition();
    }

    /**
     * Scans a boolean condition
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_condition() {
        if (jj_3R_119()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3_18()) scan_position = xsp;
        return false;
    }

    /**
     * Scans an if block
     * <p/>
     * if (???) {...} else {...}
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_if_else_block() {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (scan_condition()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (scan_statement_or_block()) return true;
        Token xsp;
        xsp = scan_position;
        if (scan_else_block()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_131() {
        return jj_scan_token(COMMA) || jj_3R_130();
    }

    private boolean jj_3R_384() {
        return jj_scan_token(CASE) || scan_condition();
    }

    private boolean jj_3R_337() {
        if (scan_qualified_identifier()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_346()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_375() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_384()) {
            scan_position = xsp;
            if (jj_scan_token(_DEFAULT)) return true;
        }
        return jj_scan_token(COLON) || jj_3R_141();
    }

    /**
     * Scans for a . followed by an alphanumerical identifier
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_dot_identifier() {
        return jj_scan_token(DOT) || jj_scan_token(IDENTIFIER);
    }

    /**
     * Scans for a multipart qualified identifier (eg: Foo, com.sample.Bar)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_qualified_identifier() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (scan_dot_identifier()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_288() {
        if (jj_scan_token(SWITCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (scan_condition()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_375()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(RBRACE);
    }

    private boolean jj_3R_383() {
        return jj_3R_72() || scan_condition();
    }

    private boolean jj_3R_374() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(INCR)) {
            scan_position = xsp;
            if (jj_scan_token(DECR)) {
                scan_position = xsp;
                if (jj_3R_383()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_82() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(VOID)) {
            scan_position = xsp;
            if (jj_3R_63()) return true;
        }
        return false;
    }

    private boolean jj_3R_303() {
        if (jj_3R_236()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_374()) scan_position = xsp;
        return false;
    }


    private boolean jj_3R_154() {
        return jj_scan_token(COMMA) || jj_3R_106();
    }

    private boolean jj_3R_287() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_212()) {
            scan_position = xsp;
            if (jj_3R_213()) {
                scan_position = xsp;
                if (jj_3R_303()) return true;
            }
        }
        return jj_scan_token(SEMICOLON);
    }

    private boolean jj_3R_363() {
        return jj_scan_token(COLON) || scan_condition();
    }

    private boolean jj_3R_253() {
        return jj_scan_token(SUPER) || jj_3R_70();
    }

    private boolean jj_3R_234() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_252()) {
            scan_position = xsp;
            if (jj_3R_253()) return true;
        }
        return false;
    }

    private boolean jj_3R_252() {
        return jj_scan_token(EXTENDS) || jj_3R_70();
    }

    private boolean jj_3R_140() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(BOOLEAN)) {
            scan_position = xsp;
            if (jj_scan_token(CHAR)) {
                scan_position = xsp;
                if (jj_scan_token(BYTE)) {
                    scan_position = xsp;
                    if (jj_scan_token(SHORT)) {
                        scan_position = xsp;
                        if (jj_scan_token(INT)) {
                            scan_position = xsp;
                            if (jj_scan_token(LONG)) {
                                scan_position = xsp;
                                if (jj_scan_token(FLOAT)) {
                                    scan_position = xsp;
                                    if (jj_scan_token(DOUBLE)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    private boolean jj_3R_186() {
        if (jj_scan_token(HOOK)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_234()) scan_position = xsp;
        return false;
    }

    private boolean jj_3R_87() {
        if (scan_modifiers()) return true;
        if (jj_3R_63()) return true;
        if (jj_3R_130()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_131()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_35() {
        if (scan_modifiers()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(CLASS)) {
            scan_position = xsp;
            if (jj_scan_token(INTERFACE)) return true;
        }
        return false;
    }


    private boolean jj_3R_225() {
        return jj_3R_87() || jj_scan_token(SEMICOLON);
    }


    /**
     * Scans a class signature (hierarchy and modifiers)
     * <p/>
     * eg: public strictfp class Foo &lt;T> extends Bar implements Spam, Bacon
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_class_signature() {
        return scan_modifiers() || scan_class_raw_signature();
    }


    private boolean jj_3R_322() {
        return jj_scan_token(THROWS) || jj_3R_337();
    }

    private boolean jj_3R_106() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_70()) {
            scan_position = xsp;
            if (jj_3R_186()) return true;
        }
        return false;
    }

    private boolean jj_3_13() {
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_198() {
        Token xsp;
        xsp = scan_position;
        if (scan_class_signature()) {
            scan_position = xsp;
            if (jj_3R_225()) {
                scan_position = xsp;
                if (scan_statement_or_block()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_106()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_154()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_scan_token(GT);
    }

    private boolean jj_3_15() {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        return false;
    }

    private boolean jj_3_12() {
        // []
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    /**
     * Scans a full braced block of statements
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_brace_block() {
        // { ... }
        return jj_scan_token(LBRACE) || jj_3R_141() || jj_scan_token(RBRACE);
    }

    private boolean jj_3_32() {
        // []
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    /**
     * Scans a generic parent type (eg : Foo, Bar&lt;Spam>)
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_parent_type() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = scan_position;

        if (jj_3R_71()) scan_position = xsp;

        while (true) {
            xsp = scan_position;
            if (jj_3_15()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Scans a goto label with a statement
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_label() {
        return jj_scan_token(IDENTIFIER) || jj_scan_token(COLON) || scan_statement_or_block();
    }

    private boolean jj_3R_105() {
        if (scan_parent_type()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3_13()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_3R_140()) return true;
        Token xsp;
        if (jj_3_12()) return true;
        while (true) {
            xsp = scan_position;
            if (jj_3_12()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_70() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_104()) {
            scan_position = xsp;
            if (jj_3R_105()) return true;
        }
        return false;
    }

    /**
     * Scans an assert statement
     *
     * @return true if the scan fails (yeah... weird)
     */
    private boolean scan_assert_statement() {
        if (jj_scan_token(ASSERT)) return true;

        if (scan_condition()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_363()) scan_position = xsp;

        return jj_scan_token(SEMICOLON);
    }


    private boolean jj_3R_63() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_70()) {
            scan_position = xsp;
            if (jj_3R_140()) return true;
        }
        return false;
    }


    private boolean jj_3R_65() {
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(STATIC)) scan_position = xsp;
        return scan_brace_block();
    }

    private boolean jj_3R_141() {
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_198()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }


    private boolean jj_3_9() {
        return jj_3R_68() || jj_scan_token(DOT);
    }

    private boolean jj_3_7() {
        return jj_scan_token(COMMA) || jj_3R_66();
    }


    private boolean jj_3_10() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        return jj_scan_token(THIS) || jj_scan_token(LPAREN);
    }

    private boolean jj_3R_145() {
        return jj_3R_68() || jj_scan_token(DOT);
    }

    private boolean jj_3R_101() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_145()) scan_position = xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        return jj_scan_token(SUPER) || jj_3R_144() || jj_scan_token(SEMICOLON);
    }

    private boolean scan_statement_or_block() {
        Token xsp;
        xsp = scan_position;
        if (scan_label()) {
            scan_position = xsp;
            if (scan_assert_statement()) {
                scan_position = xsp;
                if (scan_brace_block()) {
                    scan_position = xsp;
                    if (jj_scan_token(SEMICOLON)) {
                        scan_position = xsp;
                        if (jj_3R_287()) {
                            scan_position = xsp;
                            if (jj_3R_288()) {
                                scan_position = xsp;
                                if (scan_if_else_block()) {
                                    scan_position = xsp;
                                    if (scan_while_block()) {
                                        scan_position = xsp;
                                        if (scan_do_while_block()) {
                                            scan_position = xsp;
                                            if (scan_for_block()) {
                                                scan_position = xsp;
                                                if (jj_3R_293()) {
                                                    scan_position = xsp;
                                                    if (jj_3R_294()) {
                                                        scan_position = xsp;
                                                        if (jj_3R_295()) {
                                                            scan_position = xsp;
                                                            if (jj_3R_296()) {
                                                                scan_position = xsp;
                                                                if (jj_3R_297()) {
                                                                    scan_position = xsp;
                                                                    if (scan_try_catch_finally_block()) return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_100() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        return jj_scan_token(THIS) || jj_3R_144() || jj_scan_token(SEMICOLON);
    }


    private boolean jj_3R_281() {
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3_31() {
        return jj_scan_token(LBRACKET) || scan_condition() || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_251() {
        Token xsp;
        if (jj_3R_281()) return true;
        while (true) {
            xsp = scan_position;
            if (jj_3R_281()) {
                scan_position = xsp;
                break;
            }
        }
        return jj_3R_142();
    }

    private boolean jj_3_33() {
        Token xsp;
        if (jj_3_31()) return true;
        while (true) {
            xsp = scan_position;
            if (jj_3_31()) {
                scan_position = xsp;
                break;
            }
        }
        while (true) {
            xsp = scan_position;
            if (jj_3_32()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_67() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_100()) {
            scan_position = xsp;
            if (jj_3R_101()) return true;
        }
        return false;
    }

    private boolean jj_3R_325() {
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_345() {
        return jj_scan_token(COMMA) || jj_3R_344();
    }

    private boolean jj_3R_230() {
        Token xsp;
        xsp = scan_position;
        if (jj_3_33()) {
            scan_position = xsp;
            if (jj_3R_251()) return true;
        }
        return false;
    }


    private boolean jj_3R_233() {
        if (jj_3R_144()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_84()) scan_position = xsp;
        return false;
    }


    private boolean jj_3R_227() {
        return jj_scan_token(COMMA) || scan_condition();
    }


    private boolean jj_3R_244() {
        Token xsp;
        xsp = scan_position;
        if (scan_class_generic_type_parameters()) scan_position = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_3R_321()) return true;
        xsp = scan_position;
        if (jj_3R_322()) scan_position = xsp;
        if (jj_scan_token(LBRACE)) return true;
        xsp = scan_position;
        if (jj_3R_67()) scan_position = xsp;
        return jj_3R_141() || jj_scan_token(RBRACE);
    }

    private boolean jj_3R_208() {
        Token xsp;
        xsp = scan_position;
        if (jj_3R_71()) scan_position = xsp;
        if (scan_parent_type()) return true;
        xsp = scan_position;
        if (jj_3R_230()) {
            scan_position = xsp;
            if (jj_3R_233()) return true;
        }
        return false;
    }

    private boolean jj_3R_196() {
        return jj_scan_token(LBRACKET) || jj_scan_token(RBRACKET);
    }

    private boolean jj_3R_207() {
        return jj_3R_140() || jj_3R_230();
    }

    private boolean jj_3R_263() {
        if (jj_3R_66()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3_7()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_184() {
        if (jj_scan_token(NEW)) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_3R_207()) {
            scan_position = xsp;
            if (jj_3R_208()) return true;
        }
        return false;
    }

    private boolean jj_3R_344() {
        if (scan_modifiers()) return true;
        if (jj_3R_63()) return true;
        Token xsp;
        xsp = scan_position;
        if (jj_scan_token(ELLIPSIS)) scan_position = xsp;
        return jj_3R_164();
    }

    private boolean jj_3R_336() {
        if (jj_3R_344()) return true;
        Token xsp;
        while (true) {
            xsp = scan_position;
            if (jj_3R_345()) {
                scan_position = xsp;
                break;
            }
        }
        return false;
    }

    public void setInputStream(java.io.InputStream stream) {
        setInputStream(stream, null);
    }

    public void setInputStream(java.io.InputStream stream, String encoding) {
        try {
            input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(input_stream);
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void setReader(java.io.Reader stream) {
        input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(input_stream);
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void setTokenManager(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        token.next = token_next = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 134; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken = token;
        if ((token = token_next).next != null) token_next = token_next.next;
        else token_next = token_next.next = token_source.getNextToken();
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (JJCalls c : jj_2_rtns) {
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token_next = token;
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (scan_position == last_position) {
            mCurrentLookAhead--;
            if (scan_position.next == null) {
                last_position = scan_position = scan_position.next = token_source.getNextToken();
            } else {
                last_position = scan_position = scan_position.next;
            }
        } else {
            scan_position = scan_position.next;
        }

        if (rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != scan_position) {
                i++;
                tok = tok.next;
            }

            if (tok != null) jj_add_error_token(kind, i);
        }
        if (scan_position.kind != kind) return true;
        if (mCurrentLookAhead == 0 && scan_position == last_position) throw jj_ls;
        return false;
    }

    public Token getNextToken() {
        if ((token = token_next).next != null) {
            token_next = token_next.next;
        } else {
            token_next = token_next.next = token_source.getNextToken();
        }
        jj_gen++;
        return token;
    }

    public Token getToken(int index) {
        Token t = lookingAhead ? scan_position : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements(); ) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[129];
        for (int i = 0; i < 129; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 134; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                    if ((jj_la1_4[i] & (1 << j)) != 0) {
                        la1tokens[128 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 129; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private void jj_rescan_token() {
        rescan = true;

        for (int i = 0; i < 42; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        mCurrentLookAhead = p.arg;
                        last_position = scan_position = p.first;
                        switch (i) {
                            case 0:
                                scan_package_declaration();
                                break;
                            case 1:
                                scan_modifier();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3R_65();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3R_67();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3R_70();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3R_71();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3R_71();
                                break;
                            case 16:
                                scan_dot_identifier();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3R_75();
                                break;
                            case 20:
                                jj_3R_76();
                                break;
                            case 21:
                                jj_3R_77();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3R_80();
                                break;
                            case 25:
                                jj_3R_81();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3R_81();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3R_84();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                scan_label();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3R_87();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                scan_annotation_open();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookAheadException ignored) {
            }
        }
        rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - mCurrentLookAhead;
        p.first = token;
        p.arg = xla;
    }

    static private final class LookAheadException extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

    private class Modifier {

        final int modifiers;
        final List<AnnotationExpr> annotations;

        public Modifier(int modifiers, List<AnnotationExpr> annotations) {
            this.modifiers = modifiers;
            this.annotations = annotations;
        }

    }

}
